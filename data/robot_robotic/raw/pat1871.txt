A user may utilize a prototyping environment to create a sequence of motion control, machine vision, and/or data acquisition (DAQ) operations, e.g., without needing to write or construct code in any programming language. For example, the environment may provide a graphical user interface (GUI) enabling the user to develop/prototype the sequence at a high level, by selecting from and configuring a sequence of operations using the GUI. The prototyping environment application may then be operable to automatically, i.e., programmatically, generate graphical program code implementing the sequence. For example, the environment may generate a standalone graphical program operable to perform the sequence of operations.
Claims We claim: 1. A computer-implemented method for creating a graphical program based on a sequence that includes motion control operations, comprising: utilizing a computer to perform: receiving user input specifying a sequence of operations, wherein the specified sequence of operations includes at least one motion control operation; automatically generating a graphical program to implement the specified sequence of operations, wherein the graphical program comprises a plurality of interconnected nodes which visually indicate the functionality of the graphical program, and wherein, to automatically generate the graphical program, the program instructions are executable to generate graphical code in the graphical program without direct user input specifying the plurality of nodes or their interconnections. 2. The method of claim 1, further comprising: executing the graphical program to perform the sequence of operations. 3. The method of claim 1, wherein automatically generating the graphical program comprises including one or more nodes in the graphical program corresponding to the operations in the sequence. 4. The method of claim 1, wherein the user input to the graphical user interface specifying a desired sequence of operations does not include user input specifying programming language code to implement the sequence of operations. 5. The method of claim 1, wherein the sequence is operable to control motion of a device. 6. The method of claim 1, further comprising: receiving user input to the graphical user interface for configuring one or more of the operations in the sequence; wherein, for each operation, the configuration of the operation affects an action which the operation is operable to perform. 7. A non-transitory computer-accessible memory medium comprising instructions for creating a graphical program based on a sequence that includes motion control operations, wherein the instructions are executable by a processor to: receive user input specifying a sequence of operations, wherein the specified sequence of operations includes at least one motion control operation; and automatically generate a graphical program to implement the specified sequence of operations, wherein the graphical program comprises a plurality of interconnected nodes which visually indicate the functionality of the graphical program, and wherein, to automatically generate the graphical program, the program instructions are executable to generate graphical code in the graphical program without direct user input specifying the plurality of nodes or their interconnections. 8. The non-transitory computer-accessible memory medium of claim 1, wherein the instructions are further executable to: execute the graphical program to perform the sequence of operations. 9. The non-transitory computer-accessible memory medium of claim 1, wherein the graphical program includes a block diagram portion and a user interface panel portion. 10. The non-transitory computer-accessible memory medium of claim 1, wherein the graphical program is a graphical data flow program. 11. The non-transitory computer-accessible memory medium of claim 1, wherein to automatically generate the graphical program, the program instructions are further executable to include one or more nodes in the graphical program corresponding to the operations in the sequence. 12. The non-transitory computer-accessible memory medium of claim 1, wherein to automatically generate the graphical program, the program instructions are further executable to: generate portions of graphical code, wherein each portion of graphical code implements one of the operations in the sequence; and link the portions of graphical code together to specify data flow dependencies among the portions of graphical code. 13. The non-transitory computer-accessible memory medium of claim 12, wherein each portion of graphical code includes one or more graphical program nodes, wherein each node has one or more inputs or outputs; wherein to generate each portion of graphical code, the program instructions are further executable to connect the node inputs and outputs together in order to implement the operation with which the portion of graphical code is associated. 14. The non-transitory computer-accessible memory medium of claim 12, wherein to link a first portion of graphical code to a second portion of graphical code, the program instructions are further executable to connect an output of a node in the first portion of graphical code to an input of a node in the second portion of graphical code. 15. The non-transitory computer-accessible memory medium of claim 12, wherein the program instructions are further executable to: for each operation in the sequence, retrieve information associated with the operation from a database; utilize the database information retrieved for the particular operation to generate the portion of graphical code that implements a particular operation. 16. The non-transitory computer-accessible memory medium of claim 1, wherein the program instructions are further executable to: create an association between the sequence and the graphical program; modify the sequence to create a new sequence in response to user input after said creating the association; and modify the graphical program according to the new sequence to create a new graphical program. 17. The non-transitory computer-accessible memory medium of claim 16, wherein to modify the graphical program according to the new sequence, the program instructions are executable to use the association between the sequence and the graphical program; and wherein the association remains between the new sequence and the new graphical program. 18. The non-transitory computer-accessible memory medium of claim 1, wherein the program instructions are further executable to: create an association between the sequence and the graphical program; and lock the association between the sequence and the graphical program, wherein a locked association prevents user editing of the graphical program. 19. The non-transitory computer-accessible memory medium of claim 18, wherein the program instructions are further executable to: unlock the association between the sequence and the graphical program in response to user input after the association is locked; directly change the graphical program in response to user input after the association is unlocked. 20. The non-transitory computer-accessible memory medium of claim 19, wherein unlocking the association removes the association between the sequence and the graphical program. 21. The non-transitory computer-accessible memory medium of claim 18, wherein the program instructions are further executable to: modify the graphical program in response to user input after generating the graphical program and after creating the association between the sequence and the graphical program; determine if an association exists between the sequence and the graphical program in response to the modification of the graphical program; and remove the association between the sequence and the graphical program in response to the modification. 22. The non-transitory computer-accessible memory medium of claim 1, wherein the user input to the graphical user interface specifying a desired sequence of operations does not include user input specifying programming language code to implement the sequence of operations. 23. The non-transitory computer-accessible memory medium of claim 1, wherein the sequence is operable to control motion of a device. 24. The non-transitory computer-accessible memory medium of claim 1, wherein the instructions are further executable to: receive user input to the graphical user interface for configuring one or more of the operations in the sequence; wherein, for each operation, the configuration of the operation affects an action which the operation is operable to perform. 25. The non-transitory computer-accessible memory medium of claim 24, wherein the user input to the graphical user interface for configuring one or more of the operations in the sequence does not include receiving user input specifying programming language code to configure the operations. 26. The non-transitory computer-accessible memory medium of claim 1, wherein the program instructions are further executable to: for each operation to be configured, display a graphical panel including graphical user interface elements for setting properties of the operation and receiving user input to the graphical panel to set one or more properties of the operation. 27. A system for creating a graphical program based on a sequence that includes motion control, the system comprising: a processor; a memory medium coupled to the processor storing program instructions; and a display device coupled to the processor and memory medium; wherein the processor is operable to execute the program instructions stored in the memory medium to: receive user input specifying a sequence of operations, wherein the specified sequence of operations includes at least one motion control operation; automatically generate a graphical program to implement the specified sequence of operations, wherein the graphical program comprises a plurality of interconnected nodes which visually indicate the functionality of the graphical program, and wherein, to automatically generate the graphical program, the program instructions are executable to generate graphical code in the graphical program without direct user input specifying the plurality of nodes or their interconnections. 
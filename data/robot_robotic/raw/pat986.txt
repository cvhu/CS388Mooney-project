The present disclosure includes methods, devices, and systems for inferring system-level properties. One or more embodiments include generating a constraint model based on a system model having a number of components at different levels of abstraction and on a number of verified component properties. The constraint model can include a number of mission constraints modeling one or more mission requirements, a number of system constraints modeling one or more system-level properties, mid a number of component constraints modeling one or more component properties. One or more embodiments can include analyzing the constraint model with a constraint solver to determine whether one or more particular system-level properties can be inferred from the constraint model.
Claims What is claimed is: 1. A method for inferring system-level properties, comprising: maintaining a system model having a number of levels of abstraction, the system model including: a number of physical system components within a component hierarchy; and a number of control functions at different levels of abstraction within a control hierarchy; providing a number of mission requirements; providing a number of system-level properties; mapping at least one of the number of system-level properties to one or more of the number of control functions; mapping at least one of the system-level properties to one or more of the number of physical system components; generating a constraint model from the system model, the number of mission requirements, and the number of system-level properties; and reasoning across the constraint model to determine whether one or more of the number of system-level properties mapped to the one or more of the number of control functions and to the one or more of the number of physical system components are satisfied in response to one or more particular adjustments to: the number of mission requirements; the number of system-level properties; the system model; the number of physical system components; and the number of control functions. 2. The method of claim 1, wherein the number of levels of abstraction include: a device layer; a control layer; an execution layer; and a planning layer. 3. The method of claim 1, wherein the system model includes a model of at least one environment in which the system is to perform. 4. The method of claim 3, including reconfiguring the system in response to at least one of: a change in the at least one environment; a change in the system; and a change in one or more of the number of mission requirements. 5. The method of claim 1, including reconfiguring the system in response to a determination that the one or more of the system-level trust properties is unsatisfied in response to the one or more particular adjustments to: the number of mission requirements; the number of system-level properties; the system model; and the one or more of the control functions. 6. The method of claim 1, wherein the constraint model includes: a number of mission constraints modeling one or more of the number of mission requirements; a number of system constraints modeling one or more of the number of system-level properties; and a number of component constraints modeling one or more of the number of control functions. 7. The method of claim 1, including developing at least one inverse inference based, at least partially, on the generated constraint model. 8. The method of claim 1, including deriving a set of component-level properties sufficient to determine whether a particular one of the number of system-level properties remains satisfied. 9. A tool for inferring system-level properties, comprising: a processor; memory coupled to the processor; a verification module stored in the memory and executable by the processor to verify a number of component properties corresponding to a number of components of a particular system; a modeling module stored in the memory and executable by the processor to generate a constraint model based on a system model and a number of verified component properties, wherein the system model includes: a component architecture and hierarchy; a control architecture and hierarchy; a number of mission requirements; and a number of system-level properties; and wherein the constraint model includes: a number of mission constraints modeling one or more of the number of mission requirements; a number of system constraints modeling one or more of the number of system-level properties; and a number of component constraints modeling one or more of a number of component properties associated with the component architecture and hierarchy and the control architecture and hierarchy; and an inference module stored in the memory and executable by the processor to analyze the constraint model to determine whether one or more particular system-level properties can be inferred from the constraint model. 10. The tool of claim 9, wherein the inference module is configured to reason across different levels of abstraction to determine whether the one or more particular system-level properties can be inferred from the constraint model. 11. The tool of claim 10, wherein the inference module includes forms of reasoning that includes composition, embedding, and abstraction. 12. The tool of claim 9, wherein the inference module is configured to: derive a number of system-level properties based on a number of performed component level tests; and determine a number of additional component level tests sufficient to provide verification of a particular set of system-level properties. 13. The tool of claim 9, wherein the system is an unmanned autonomous system. 14. The tool of claim 9, wherein the system is an unmanned vehicle. 15. The tool of claim 9, wherein the inference module is a hybrid constraint solver including discrete and continuous values. 16. The tool of claim 9, wherein the system includes a planning module configured to generate a number of trusted plans to a particular system goal. 17. The tool of claim 9, including a reconfiguration module configured to reconfigure the system in response to at least one of: a change in at least one environment; a change in the system; a change in one or more of the mission requirements; and a change in one or more of the system-level properties. 18. The tool of claim 9, wherein the inference module is configured to determine, for each of the one or more particular system-level properties: whether the particular system-level property can be inferred from the constraint model; and whether additional information is needed to determine whether the particular system-level property can be inferred from the constraint model. 19. The tool of claim 18, wherein the inference module is configured to propose one or more additional constraints sufficient for a constraint solver to determine whether the one or more particular system-level properties can be inferred from the constraint model when it is determined that additional information is needed to determine whether the particular system-level property can be inferred from the constraint model. 
A method of creating an obstacle-free diagram using topological sensor data to form a graph corresponding to a driving path, transforming the graph using discrete heuristics, locally smoothing a plurality of edges of the graph after the transforming, and globally smoothing the graph after the locally smoothing. Transforming includes deleting an edge of the graph, merging two intersections of the graph into a single intersection, and collapsing a plurality of edges forming a loop into a single edge. Locally smoothing includes smoothing a lane segment of the graph by minimizing a sum of a function of smoothness and a function of distance. Globally smoothing includes defining an intersection potential and minimizing a sum of the function of smoothness, the function of distance, a function of intersections and a function of direction.
Claims The invention claimed is: 1. A method, comprising: creating an obstacle-free diagram using sensor data gathered from a topological sensor configured to detect obstacles within a surrounding environment; forming a graph from the obstacle-free diagram which corresponds to a driving path of the surrounding environment and recording the graph onto electronic memory of a computing device; transforming the graph using a processor of the computing device to apply discrete heuristic transformations to the graph; locally smoothing a plurality of edges of the graph using the processor after the transforming; globally smoothing the graph using the processor after the locally smoothing; creating a lane network corresponding to the graph after the globally smoothing by using a processor to create two lanes substantially equidistant and parallel to the graph; and displaying the lane network using a display device. 2. The method recited in claim 1, wherein the discrete heuristic transformations include deleting an edge of the graph, merging two intersections of the graph into a single intersection, and collapsing a plurality of edges forming a loop into a single edge. 3. The method recited in claim 1, wherein the locally smoothing includes smoothing a lane segment of the graph by minimizing a sum of a function of smoothness and a function of distance. 4. The method recited in claim 3, wherein the graph is defined as G=V, E having vertices V and edges E, where V={x.sub.i}={x.sub.i, y.sub.i} and lane segments S.epsilon.V are a collection of connected nodes between two intersections of the graph, and the function of smoothness is defined as .function..di-elect cons..times. ##EQU00003## 5. The method recited in claim 3, wherein the graph is defined as G=V, E having vertices V and edges E, where V={x.sub.i}={x.sub.i, y.sub.i}, o.sub.i is a location of an obstacle in an obstacle map 0 which is closest to a location x, on the graph, d.sub.max is a predetermined maximum road width, and the function of distance is defined as .function..di-elect cons..times. ##EQU00004## 6. The method recited in claim 3, wherein the globally smoothing includes defining an intersection potential and minimizing a sum of the function of smoothness, the function of distance, a function of intersections and a function of direction. 7. The method recited in claim 1, wherein the obstacle-free diagram is a generalized Voronoi diagram. 8. A method, comprising: creating an obstacle-free diagram using sensor data gathered from a topological sensor configured to detect obstacles within a surrounding environment; forming a graph from the obstacle-free diagram which corresponds to a driving path of the surrounding environment and recording the graph onto electronic memory of a computing device; transforming the graph using a processor of the computing device to apply discrete heuristic transformations to the graph; locally smoothing a plurality of edges of the graph using the processor after the transforming; and globally smoothing the graph using the processor after the locally smoothing, wherein the locally smoothing includes smoothing a lane segment of the graph by minimizing a sum of a function of smoothness and a function of distance, and the globally smoothing includes defining an intersection potential and minimizing a sum of the function of smoothness, the function of distance, a function of intersections and a function of direction. 9. The method recited in claim 8, wherein the graph has intersections I and neighbor sets N(i), where i.epsilon.I, k.epsilon.N(i), .DELTA..sub.ij=x.sub.i-x.sub.j is a vector between adjacent nodes i and j, and the function of intersections is defined as .function..di-elect cons..times..di-elect cons..function..times..DELTA..DELTA. ##EQU00005## 10. The method recited in claim 8, wherein the graph is defined as G=V, E having vertices V and edges E, where V=[x.sub.i]={x.sub.i, y.sub.i} and lane segments S.epsilon.V are a collection of connected nodes between two intersections of the graph, o, is a location of an obstacle in an obstacle map 0 which is closest to a location x, on the graph, .theta..function. ##EQU00006## is a tangential angle of a lane segment at node i where i.epsilon.S, .alpha..sub.O(x.sub.i) is a principal-direction angle at the location x.sub.i, and the function of direction is defined by .function..di-elect cons..times..function..times..theta..alpha..function. ##EQU00007## 11. The method recited in claim 8, further comprising: creating a lane network corresponding to the graph after the globally smoothing by using a processor to create two lanes substantially equidistant and parallel to the graph; and displaying the lane network using a display device. 12. A method, comprising: creating a graph corresponding to a driving path of an environment using an obstacle-free diagram corresponding a topology of the environment; transforming the graph using a processor of a computing device to apply discrete heuristic transformations to the graph; locally smoothing a plurality of edges of the graph using the processor after the transforming; globally smoothing the graph using the processor after the locally smoothing; creating a lane network corresponding to the graph after the globally smoothing by using a processor to create two lanes substantially equidistant and parallel to the graph; and displaying the lane network using a display device. 13. The method recited in claim 12, wherein the discrete heuristic transformations include deleting an edge of the graph, merging two intersections of the graph into a single intersection, and collapsing a plurality of edges forming a loop into a single edge. 14. The method recited in claim 12, wherein the locally smoothing includes smoothing a lane segment of the graph by minimizing a sum of a function of smoothness and a function of distance. 15. The method recited in claim 14, wherein the globally smoothing includes defining an intersection potential and minimizing a sum of the function of smoothness, the function of distance, a function of intersections and a function of direction. 16. The method recited in claim 12, wherein the obstacle-free diagram is a generalized Voronoi diagram. 17. A method, comprising: creating a graph corresponding to a driving path of an environment using an obstacle-free diagram corresponding a topology of the environment; transforming the graph using a processor of a computing device to apply discrete heuristic transformations to the graph; locally smoothing a plurality of edges of the graph using the processor after the transforming; and globally smoothing the graph using the processor after the locally smoothing, wherein the locally smoothing includes smoothing a lane segment of the graph by minimizing a sum of a function of smoothness and a function of distance, and the globally smoothing includes defining an intersection potential and minimizing a sum of the function of smoothness, the function of distance, a function of intersections and a function of direction. 18. The method recited in claim 17, further comprising: creating a lane network corresponding to the graph after the globally smoothing by using a processor to create two lanes substantially equidistant and parallel to the graph; and displaying the lane network using a display device. 
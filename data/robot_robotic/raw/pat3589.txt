A software-controlled computational component for processing input data is provided that includes a control program 148 for controlling the operation of a first computational component, an input for input data, and an output for output data. Each of the machine code for the control program, the input data, and the output data are expressed in a markup language, such as Extensible Markup Language.
Claims What is claimed is: 1. A software-controlled computational component for processing input data, comprising: (a) a configurator; (b) an input to the configurator for input data and an output from the configurator for output data, wherein each of program script setting forth rules for processing the input data to generate the output data, the input data, and the output data are expressed in a markup language and wherein the input data comprises a plurality of forms, materials, macros, and prototypes; (c) a queue manager operable to create a message queue for a transaction associated with a selected request and write the selected request to a message queue; and (d) a network server operable to receive requests from a network browser and forward the requests to the queue manager; wherein the configurator reads the selected request from the message queue, processes the selected request to provide respective output data, and provides the respective output data to the message queue, wherein the queue manager provides the respective output data to the network server, and wherein the network server provides the respective output data to the network browser. 2. The software-controlled computational component of claim 1, further comprising: (e) a configurator simulator, wherein output data from the configurator simulator comprises a test script and a simulated materials report. 3. The software-controlled computational component of claim 2, further comprising: (f) a test harness tool operable to execute the test script and provide simulated input to the configurator, the configurator producing, as the output data, a configurator materials report; and (g) a difference engine operable to compare the simulated materials report against the configurator materials report to identify differences therebetween. 4. The software-controlled computational component of claim 2, wherein the control program script comprises a plurality of tags and the plurality of tags belong to at least one of the following classes: function, control, object, procedure, condition, method, statement, and attribute. 5. The software-controlled computational component of claim 1, wherein the machine code for the queue manager is written in a markup language. 6. The software-controlled computational component of claim 5, wherein the network server is operable to convert the output data from the configurator from a first markup language to a second different markup language. 7. The software-controlled computational component of claim 6, wherein the first markup language is Extensible Markup Language and the second markup language is Hypertext Markup Language. 8. A computer readable medium comprising processor executable machine code that, when executed, performs the steps of claim 1. 9. A software-controlled method for processing input data, comprising: (a) providing input data; (b) executing a control program which sets forth rules for processing the input data to generate output data, wherein each of the control program script, the input data, and the output data are expressed in a markup language, wherein, in the executing step, the control program is operable to simulate the operation of a configurator, and wherein the output data comprises a test script and a simulated materials report; (c) executing the test script to produce a simulated configurator input; (d) providing the simulated configurator input to the configurator to produce a configurator materials report; and (e) comparing the simulated materials report against the configurator materials report to identify differences therebetween. 10. The method of claim 9, wherein the input data comprises a plurality of forms, materials, macros, and prototypes. 11. The method of claim 9, wherein the control program script comprises a plurality of tags and the plurality of tags belong to at least one of the following classes: function, control, object, procedure, condition, method, statement, and attribute. 12. The method of claim 9, wherein the input data is associated with a sales order and wherein the executing step comprises: (B1) based on the input data, retrieving at least one of forms, materials, macros, and prototypes; and (B2) determining from the input data and the at least one of forms, materials, macros, and prototypes a list of components associated with the order. 13. The method of claim 12, further comprising: (f) receiving the input data in a request from a network browser; (g) converting the input data from a second markup language to a first different markup language; (h) writing the request comprising the converted input data to a message queue, wherein the executing step is in response to the writing step (h); (i) writing a response to the message queue, the response being associated with the output data; (j) converting the output data from the first markup language to the second markup language; and (k) forwarding the converted output data to the network browser. 14. The method of claim 13, wherein the first markup language is Extensible Markup Language and the second markup language is Hypertext Markup Language. 15. A computer readable medium comprising processor executable machine code operable to perform the steps of claim 9. 16. The method of claim 9, wherein the input data comprises a requirement specification written in the markup language. 17. A software-controlled computational component for processing input data, comprising: (a) a control program for controlling the operation of a first computational component; (b) an input for input data and an output for output data, wherein the control program comprises rules for processing the input data to generate the output data, wherein each of the control program script, the input data, and the output data are expressed in a markup language, wherein the first computational component is operable to simulate a second computational component, wherein the second computational component is a configurator, and wherein the output data comprises a test script and a simulated materials report; (c) a test harness tool operable to execute the test script and provide simulated input to the configurator to produce a configurator materials report; and (d) a difference engine operable to compare the simulated materials report against the configurator materials report to identify differences therebetween. 18. The software-controlled computational component of claim 17, further comprising: (e) a network server operable to receive requests from a network browser and forward the request to a queue manager; and (f) the queue manager operable to create a message queue for the transaction associated with the request and write the request to the message queue. 19. The method of claim 17, further comprising a configurator simulator outputting a test script and a simulated materials report. 20. The method of claim 19, further comprising: executing, by a test harness tool, the test script to produce a simulated configurator input; providing the simulated configurator input to the configurator to produce a configurator materials report; and comparing the simulated materials report against the configurator materials report to identify differences therebetween. 21. A software-controlled method for processing input data, comprising: (a) receiving the input data in a request from a network browser, wherein the input data is associated with a sales order; (b) converting the input data from a second markup language to a first different markup language; (c) writing the request comprising the converted input data to a message queue; (d) in response to step (c), executing a control program defining a configurator, the control program setting forth rules for processing the input data to generate output data, wherein each of the control program script, the input data, and the output data are expressed in a markup language and wherein the executing step comprises the sub-steps: (D1) based on the input data, retrieving at least one of forms, materials, macros, and prototypes; and (D2) determining from the input data and the at least one of forms, materials, macros, and prototypes a list of components associated with the order; (e) writing a response to the message queue, the response being associated with the output data; (f) converting the output data from the first markup language to the second markup language; and (g) forwarding the converted output data to the network browser. 22. A software-controlled computational component for processing input data, comprising: (a) a configurator program for defining a configurator; (b) an input to the configurator for input data and an output from the configurator for output data, wherein each of the configurator program script, the input data, and the output data are expressed in a markup language; (c) a network server operable to receive requests from a network browser and forward the requests to a queue manager; and (d) the queue manager operable to create a message queue for a transaction associated with a selected request and write the selected request to the message queue, wherein the machine code for the queue manager is written in a markup language. 23. The software-controlled computational component of claim 22, wherein the network server is operable to convert output from the configurator from a first markup language to a second different markup language. 24. The software-controlled computational component of claim 23, wherein the configurator program script comprises a plurality of tags and the plurality of tags belong to at least one of the following classes: function, control, object, procedure, condition, method, statement, and attribute. 25. The software-controlled computational component of claim 22, wherein the input data comprises a plurality of forms, materials, macros, and prototypes, wherein the configurator reads the selected request from the message queue, processes the selected request to provide respective output data, and provides the respective output data to the message queue, wherein the queue manager provides the respective output data to the network server, and wherein the network server provides the respective output data to the network browser. 26. The software-controlled computational component of claim 22, wherein the first markup language is Extensible Markup Language and the second markup language is Hypertext Markup Language. 
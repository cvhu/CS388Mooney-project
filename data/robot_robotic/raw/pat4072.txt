A method for automatically generating test programs includes receiving a description of a system under test, expressed in terms of variables associated with the system and conditional constraints including semantics applied to the variables, and receiving a definition of an event to be tested in the system. The method generates an ECondCSP over the variables responsively to the definition of the event and to the conditional constraints, such that at least some of the semantics of the conditional constraints are preserved in the ECondCSP when one or more of the variables to which the semantics are applied are inactive. The ECondCSP is solved to generate a test case for the system.
Claims The invention claimed is: 1. A method for automatically generating test programs, comprising: receiving a description of a system under test, expressed in terms of variables associated with the system and conditional constraints comprising semantics applied to the variables; receiving a definition of an event to be tested in the system; generating an ECondCSP over the variables responsively to the definition of the event and to the conditional constraints, such that at least some of the semantics of the conditional constraints are preserved in the ECondCSP when one or more of the variables to which the semantics are applied are inactive; and solving the ECondCSP to generate a test case for the system. 2. A method for modeling a system, comprising: characterizing the system in terms of variables associated with the system and conditional constraints comprising semantics applied to the variables; defining an ECondCSP over the variables responsively to the conditional constraints, such that at least some of the semantics of the conditional constraints are preserved in the ECondCSP when one or more of the variables to which the semantics are applied are inactive; and solving the ECondCSP so as to model an aspect of the system. 3. The method according to claim 2, wherein the conditional constraints comprise atomic constraints linked by logical operators, and wherein defining the ECondCSP comprises: accepting one or more operator semantics tables with respect to the logical operators; and parsing the conditional constraints using the operator semantics tables to generate the ECondCSP constraint. 4. The method according to claim 3, wherein accepting the one or more operator semantics tables comprises accepting a list of operands of the logical operator and a corresponding definition of preserved semantics for each activity/inactivity status combination of the operands. 5. The method according to claim 3, wherein parsing the conditional constraints comprises parsing each of the conditional constraints into a parse-tree, and merging the parse-tree into the ECondCSP constraint. 6. The method according to claim 2, wherein solving the ECondCSP comprises transforming the ECondCSP into a CondCSP, and solving the CondCSP using a CondCSP solver. 7. The method according to claim 2, wherein the system has a structure and one or more inputs, and the one or more of the variables describe the structure and the inputs to the system, and wherein solving the ECondCSP comprises finding values of the variables so as to determine the inputs to be made to the system. 8. The method according to claim 2, wherein the system comprises a mechanical system, and one or more of the variables correspond to control parameters of the mechanical system, and wherein solving the ECondCSP comprises generating a command to control the mechanical system based on values of the one or more of the variables. 9. The method according to claim 2, wherein one or more of the variables correspond to features of an image containing visual information, and wherein solving the ECondCSP comprises identifying an object in the image based on the features. 10. The method according to claim 2, wherein one or more of the variables correspond to a natural language input, and wherein solving the ECondCSP comprises parsing the natural language, responsively to values of the one or more of the variables, so as to interpret the language. 11. The method according to claim 2, wherein one or more of the variables correspond to characteristics of a condition, and wherein solving the ECondCSP comprises determining a diagnosis of the condition based on values of the one or more of the variables. 12. The method according to claim 2, wherein one or more of the variables correspond to characteristics of resources whose use is to be scheduled, and wherein solving the ECondCSP comprises scheduling the use of the resources responsively to values of the one or more of the variables. 13. Apparatus for automatically generating test programs, comprising a test generator, a description of a system under test, expressed in terms of variables associated with the system and conditional constraints comprising semantics applied to the variables, to receive a definition of an event to be tested in the system, to generate an ECondCSP over the variables responsively to the definition of the event and to the conditional constraints, such that at least some of the semantics of the conditional constraints are preserved in the ECondCSP when one or more of the variables to which the semantics are applied are inactive, and to solve the ECondCSP to generate a test case for the system. 14. The apparatus according to claim 13, wherein the test generator receives receive a model of a processor and generates a test program for testing the processor. 15. The apparatus according to claim 13, wherein the test generator generates an expected system behavior in response to the event, whereby the system is tested against the expected system behavior using the test case. 16. The apparatus according to claim 13, wherein the test generator generates a plurality of test cases, each corresponding to one of a plurality of solutions of the ECondCSP. 17. The apparatus according to claim 13, wherein the test generator transforms the ECondCSP to a CondCSP, and comprises a CondCSP solver, which solves the CondCSP. 18. Apparatus for modeling a system, comprising a Constraint Satisfaction Problem (CSP) processing module, which characterizes the system in terms of variables associated with the system and conditional constraints comprising semantics applied to the variables, to define an ECondCSP over the variables responsively to the conditional constraints, such that at least some of the semantics of the conditional constraints are preserved in the ECondCSP when one or more of the variables to which the semantics are applied are inactive, and to solve the ECondCSP so as to model an aspect of the system. 19. The apparatus according to claim 18, wherein the conditional constraints comprise atomic constraints linked by logical operators, and wherein the CSP processing module accepts one or more operator semantics tables with respect to the logical operators, and to parse the conditional constraints using the operator semantics tables to generate the ECondCSP constraint. 20. The apparatus according to claim 19, wherein the CSP processing module accepts a list of operands of the logical operator and a corresponding definition of preserved semantics for each activity/inactivity status combination of the operands. 21. The apparatus according to claim 20, wherein the CSP processing module defines at least one output of the logical operator to be returned when one or more of the operands are inactive. 22. The apparatus according to claim 20, wherein the CSP processing module defines at least one of the activity/inactivity status combinations for which no semantics are preserved. 23. The apparatus according to claim 19, wherein the CSP processing module parses each of the conditional constraints into a parse-tree, and merges the parse-tree into the ECondCSP constraint. 24. The apparatus according to claim 23, wherein the CSP processing module assigns the atomic constraints to leaves of the parse-tree and to assign the logical operators to nodes of the parse-tree, so that at least one of the logical operators links lower-level constraints below the node to which the at least one of the logical operators is assigned. 25. The apparatus according to claim 24, wherein the CSP processing module traverses the parse-tree in a depth-first order and merges the lower-level constraints of the nodes into the ECondCSP constraint as the nodes are traversed. 26. The apparatus according to claim 25, wherein the CSP processing module generates, at each of the nodes, a combined activation requirement and combined preserved semantics based on the lower-level constraints and on the operator semantics tables of the logical operators. 27. The apparatus according to claim 25, wherein the CSP processing module generates a combined activation requirement and combined preserved semantics based on the lower-level constraints and on a default definition of the preserved semantics with respect to at least one of the logical operators. 28. The apparatus according to claim 23, wherein the CSP processing module generates a plurality of parse-trees, to reduce the parse-trees into a Directed Acyclic Graph (DAG), and to merge the DAG, using the operator semantics tables, into the ECondCSP. 29. The apparatus according to claim 28, wherein the CSP processing module identifies identical nodes within the parse-trees and merges the identical nodes to appear only once in the DAG. 30. The apparatus according to claim 18, wherein the CSP processing module transforms the ECondCSP into a CondCSP, and comprises a CSP solver, which solves the CondCSP. 31. The apparatus according to claim 30, wherein the CSP processing module defines an extended compatibility constraint, to add a shadow variable for each of at least some of the variables in the ECondCSP, and to convert the extended compatibility constraint into one or more CondCSP compatibility constraints using the shadow variable. 32. The apparatus according to claim 31, wherein the CSP processing module assigns a domain to the shadow variable. 33. The apparatus according to claim 31, wherein the CSP processing module adds activity constraints for inclusion in the CondCSP compatibility constraints, specifying that each variable is active if its corresponding shadow variable is inactive, and vice versa. 34. The apparatus according to claim 30, wherein the CSP processing module defines a plurality of activity/inactivity truth assignments over the variables in the ECondCSP, and to add a respective CondCSP constraint to the CondCSP for each of the activity/inactivity truth assignments. 35. A computer software product for automatically generating test programs, the product comprising a computer-readable medium in which program instructions are stored, which instructions, when read by a computer, cause the computer to receive a description of a system under test, expressed in terms of variables associated with the system and conditional constraints comprising semantics applied to the variables, to receive a definition of an event to be tested in the system, to generate an ECondCSP over the variables responsively to the definition of the event and to the conditional constraints, such that at least some of the semantics of the conditional constraints are preserved in the ECondCSP when one or more of the variables to which the semantics are applied are inactive, and to solve the ECondCSP to generate a test case for the system. 36. A computer software product for modeling a system, the product comprising a computer-readable medium in which program instructions are stored, which instructions, when read by a computer, cause the computer to characterize the system in terms of variables associated with the system and conditional constraints comprising semantics applied to the variables, to define an ECondCSP over the variables responsively to the conditional constraints, such that at least some of the semantics of the conditional constraints are preserved in the ECondCSP when one or more of the variables to which the semantics are applied are inactive, and to solve the ECondCSP so as to model an aspect of the system. 37. The product according to claim 36, wherein the conditional constraints comprise atomic constraints linked by logical operators, and wherein the instructions cause the computer to accept one or more operator semantics tables with respect to the logical operators, and to parse the conditional constraints using the operator semantics tables to generate the ECondCSP constraint. 38. The product according to claim 37, wherein the instructions cause the computer to accept a list of operands of the logical operator and a corresponding definition of preserved semantics for each activity/inactivity status combination of the operands. 39. The product according to claim 37, wherein the instructions cause the computer to parse each of the conditional constraints into a parse-tree, and to merge the parse-tree into the ECondCSP constraint. 40. The product according to claim 36, wherein the instructions cause the computer to transform the ECondCSP into a CondCSP, and comprising a CSP solver, which solves the CondCSP. 
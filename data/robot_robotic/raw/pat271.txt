Presently described is a decompilation method of operation and system for parsing executable code, identifying and recursively modeling data flows, identifying and recursively modeling control flow, and iteratively refining these models to provide a complete model at the nanocode level. The nanocode decompiler may be used to determine if flaws, security vulnerabilities, or general quality issues exist in the code. The nanocode decompiler outputs in a standardized, human-readable intermediate representation (IR) designed for automated or scripted analysis and reporting. Reports may take the form of a computer annotated and/or partially human annotated nanocode listing in the above-described IR. Annotations may include plain English statements regarding flaws and pointers to badly constructed data structures, unchecked buffers, malicious embedded code or "trap doors," and the like. Annotations may be generated through a scripted analysis process or by means of an expert-enhanced, quasi-autonomous system.
Claims I claim: 1. A system for facilitating the analysis of executable software code, the system comprising: a decompiler and analysis subsystem operating on a processor, the decompiler and analysis subsystem comprising; a loader for separating the executable software code into a code section and a data section; a library module for generating one or more signature files, wherein the signature files comprise a collection of software routines; and a static library identifier for comparing the code and data sections of the executable software code to the one or more signature files; and a graphical user interface rendered on a display device, the graphical user interface for (i) accepting user commands related to the modeling and analysis of the executable software code and (ii) displaying results of the comparison on the display device. 2. The system of claim 1 wherein the decompiler and analysis subsystem further comprises a data flow transformer for creating an intermediate representation of the executable software code comprising a complete model of the executable software code based on the data sections and code sections. 3. The system of claim 2 wherein the intermediate representation comprises a data flow model and a control flow model. 4. The system of claim 2 wherein the graphical user interface displays the data flow model and the control flow model on the display device. 5. The system of claim 1 further comprising a source code renderer for creating source code files based on the intermediate representation from which the executable software code can be rendered. 6. The system of claim 1 wherein the decompiler and analysis subsystem further comprises a variablizer for iteratively discovering variables contained in the executable software code. 7. The system of claim 2 wherein the intermediate representation of the executable software provides a complete nanocode model of the executable software code whereby the decompiler and analysis subsystem can compare the nanocode model to a reference nanocode model and identify discrepancies between the nanocode model and the reference nanocode model. 8. The system of claim 1 further comprising a modeler for providing one or more of processor architecture information, software compiler information, and source code parser information to the loader. 9. A system for facilitating the analysis of executable software code, the system comprising: a decompiler and analysis subsystem operating on a processor, the decompiler and analysis subsystem comprising; a loader for separating the executable software code into a code section and a data section; a library module for generating one or more signature files; and a static library identifier for comparing the code and data sections of the executable software code to the one or more signature files; a variablizer for iteratively discovering variables contained in the executable software code; and a graphical user interface rendered on a display device, the graphical user interface for (i) accepting user commands related to the modeling and analysis of the executable software code and (ii) displaying results of the comparison on the display device. 10. The system of claim 9 wherein the decompiler and analysis subsystem further comprises a data flow transformer for creating an intermediate representation of the executable software code comprising a complete model of the executable software code based on the data sections and code sections. 11. The system of claim 10 wherein the intermediate representation comprises a data flow model and a control flow model. 12. The system of claim 10 wherein the graphical user interface displays the data flow model and the control flow model on the display device. 13. The system of claim 9 wherein the signature files comprise a collection of software routines. 14. The system of claim 10 wherein the intermediate representation of the executable software provides a complete nanocode model of the executable software code whereby the decompiler and analysis subsystem can compare the nanocode model to a reference nanocode model and identify discrepancies between the nanocode model and the reference nanocode model. 15. The system of claim 9 further comprising a modeler for providing one or more of processor architecture information, software compiler information, and source code parser information to the loader. 
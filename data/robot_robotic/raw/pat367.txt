A method of automatically controlling an extendable robot arm to avoid collisions while returning to a first position from a second position includes periodically storing locations of the robot arm as the robot arm moves along a forward path from the first position to the second position; applying heuristic algorithms to the stored locations to determine a return path to the first position, the return path including at least a portion of a retrace path retracing the stored locations of the forward path; and controlling the robot arm to return to the first position using the determined return path.
Claims What is claimed is: 1. A method of automatically controlling an extendable robot arm using a control processor to avoid collisions while returning to a first position from a second position, the method comprising: periodically storing locations of the robot arm as the robot arm moves along a forward path from the first position to the second position, wherein periodically storing locations of the robot arm as the robot arm moves along the forward path, comprises: determining a current location of the robot arm on the forward path after a predetermined time period; determining a distance between the current location and a previously stored location of the robot arm on the forward path; and storing the current location as a point on the forward path when the determined distance is greater than a predetermined minimum distance; applying a plurality of heuristic algorithms to the stored locations to determine a return path to the first position, the return path including at least a portion of a retrace path retracing the stored locations of the forward path; and returning the robot arm to the first position under control of the control processor using the determined return path. 2. The method of claim 1, further comprising: determining whether the robot arm at the second position is within a predetermined distance of a known return path before applying the plurality of heuristic algorithms, wherein the robot arm is controlled to return to the first position using the known return path when the known return path is within the predetermined distance. 3. The method of claim 1, wherein applying the plurality of heuristic algorithms includes performing a gridding operation, comprising: selecting a grid size; determining a distance between a current point of the return path and a next stored point of the stored locations of the retrace path; and identifying the next stored point as the next point of the return path when the determined distance is greater than or equal to the grid size. 4. The method of claim 3, wherein applying the plurality of heuristic algorithms further includes: adjusting the grid size based on comparing the next point on the return path with a corresponding portion of the retrace path. 5. The method of claim 4, wherein adjusting the grid size comprises: calculating a ratio between the determined distance and a curve length of the retrace path between the current point of the return path and the next stored point of the stored locations; and adjusting the grid size based on the calculated ratio. 6. The method of claim 5, wherein adjusting the grid size based on the calculated ratio comprises: increasing the grid size when the ratio is less than an upper threshold and greater than a lower threshold; and maintaining the grid size when the ratio is greater than the upper threshold or less than the lower threshold. 7. The method of claim 3, wherein applying the plurality of heuristic algorithms includes decreasing the grid size to reduce chances of collision. 8. The method of claim 3, wherein applying the plurality of heuristic algorithms further includes: identifying a collision avoidance point of the return path short of the next point of the retrace path, wherein the robot arm is controlled to move to the collision avoidance point of the return path to reduce chances of collision. 9. The method of claim 1, wherein applying the plurality of heuristic algorithms includes generating waypoints, comprising: determining a clear location; determining a retract location; and determining whether the robot arm is clear of a station that includes the second position at the retract location. 10. The method of claim 9, wherein determining whether the robot arm is clear of the station comprises: determining whether a wrist of robot arm is retracting backwards linearly when the robot arm is positioned at the retract location; and when wrist of the robot arm is retracting backwards linearly, determining that the robot arm is not clear of the station. 11. The method of claim 10, wherein generating waypoints further comprises: determining another retract location when the robot arm is not clear of the station. 12. The method of claim 9, wherein applying the plurality of heuristic algorithms further includes performing a blind radial pull-in operation, comprising: determining whether a collision will likely occur during a blind radial pull-in of the robot arm along a radial pull-in path from the retract location to the first position; and wherein, when a collision is not likely to occur, the blind radial pull-in of the robot arm is performed. 13. The method of claim 12, wherein determining whether a collision will likely occur during the blind radial pull-in of the robot arm comprises: determining whether locations on the retrace path are larger radial distances from the first position than locations on the radial pull-in path; and performing the blind radial pull-in of the robot arm when the radial distances of the locations on the retrace path are larger than the radial distances of the location of the radial pull-in path. 14. The method of claim 13, wherein determining whether a collision will likely occur during the blind radial pull-in of the robot arm further comprises: determining another retract location when the radial distances of the locations on the retrace path are less than the radial distances of the location of the radial pull-in path. 15. A method of automatically determining a return path of a robot using a control processor to avoid collisions while returning to a safe zone from an extended position outside of the safe zone, the method comprising: determining a distance between a current point on the return path, corresponding to a current position of the robot, and a next point on a retrace path previously stored in a location array during movement of the robot along a corresponding forward path from the safe zone; identifying the next retrace path point as a potential next point on the return path when the determined distance is greater than or equal to a grid size; calculating a ratio between the determined distance and a curve length of the retrace path between the current point on the return path and the potential next point on the retrace path; determining whether to reduce the grid size based on the calculated ratio; and when it is determined not to reduce the grid size, identifying the potential next point as an actual next point on the return path, and moving the robot toward the safe zone on the return path, including the current point and the actual next point, under control of the control processor. 16. The method of claim 15, further comprising: determining whether a collision will likely occur during a blind radial pull-in of the robot from the actual next point on the return path to the safe zone along a radial pull-in path; and when it is determined that a collision is not likely to occur, performing the blind radial pull-in of the robot along the radial pull-in path under control of the control processor. 17. The method of claim 16, further comprising: when it is determined that a collision is likely to occur, determining another actual next point on the return path. 18. The method of claim 16, wherein determining whether a collision will likely occur during a blind radial pull-in of the robot comprises: determining whether locations on the retrace path are larger radial distances from the safe zone than locations on the radial pull-in path; and performing the blind radial pull-in of the robot when the radial distances of the locations on the retrace path are larger than the radial distances of the location of the radial pull-in path. 19. A computer readable medium storing a program, executable by a computer, for controlling an extendable robot arm to avoid collisions while returning to a safe zone from an extended position, the computer readable medium comprising: a return path determining code segment for determining at least a portion of a return path of the robot arm from the extended position to the safe zone based on previously stored locations of the robot arm as the robot arm moved along a forward path from the safe zone to the extended position; a waypoint determining code segment for determining a clear location and a retract location on the return path with respect to the extended position; a clearance code segment for determining whether the robot arm is clear of a station that includes the extended position at the retract location; and a radial pull-in code segment for determining whether a collision will likely occur during a blind radial pull-in of the robot arm along a radial pull-in path from the retract location to the safe zone, when the clearance code segment determines that the robot arm is clear of the station, wherein the blind radial pull-in of the robot arm along the radial pull-in path is performed when the radial pull-in code segment determines that a collision is not likely to occur, and wherein the robot arm moves to another previously stored location on the forward path when the radial pull-in code segment determines that a collision is likely to occur. 
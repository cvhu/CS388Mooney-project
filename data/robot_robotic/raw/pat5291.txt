Presently described is a decompilation method of operation and system for parsing executable code, identifying and recursively modeling data flows, identifying and recursively modeling control flow, and iteratively refining these models to provide a complete model at the nanocode level. The nanocode decompiler may be used to determine if flaws, security vulnerabilities, or general quality issues exist in the code. The nanocode decompiler outputs in a standardized, human-readable intermediate representation (IR) designed for automated or scripted analysis and reporting. Reports may take the form of a computer annotated and/or partially human annotated nanocode listing in the above-described IR. Annotations may include plain English statements regarding flaws and pointers to badly constructed data structures, unchecked buffers, malicious embedded code or "trap doors," and the like. Annotations may be generated through a scripted analysis process or by means of an expert-enhanced, quasi-autonomous system.
Claims I claim: 1. A method of analyzing executable software code by decompiling said executable code, comprising: parsing said executable software code to identify one or more data flows; recursively, for each identified one or more data flow: discovering a fitting data flow model fitting the respective identified data flow; optimizing said fitting data flow model as a function of the respective identified data flow to form a refined data flow model; propagating said refined data flow model as a function of the respective identified data flow until substantially all data variables are modeled; and expressing said refined data flow model in an intermediate representation; parsing said executable software code to identify one or more control flows; recursively, for each identified one or more control flow: discovering a fitting control flow model fitting the respective identified control flow, comprising one or more control branches; optimizing said fitting control flow model as a function of the respective identified control flow to form a refined control flow model; propagating said refined control flow model as a function of the respective identified control flow until substantially all said control branches are modeled; and expressing said refined control flow model in said intermediate representation; wherein said refined data flow model and said refined control flow model express a complete nanocode model of said executable software code in said intermediate representation. 2. The method of claim 1, further comprising translating said intermediate representation into a high-level language. 3. The method of claim 1, further comprising analyzing said nanocode model. 4. The method of claim 3, wherein said analyzing further comprises: comparing said nanocode model to a reference nanocode model; forming a report listing differences; flagging said differences according to risk severity inherent therein. 5. The method of claim 3, wherein said analyzing further comprises: performing one or more analytic tasks using one or more corresponding pre-defined task scripts, said task scripts comprising a plurality of search, control, and/or data instructions to be executed by a control process and producing a result; and forming a report based on said results of said scripts. 6. The method of claim 5, wherein said task scripts comprise pre-existing scripts and scripts adapted from previous uses. 7. The method of claim 5, wherein said report comprises plain language statements and one or more optional nanocode model annotations. 8. The method of claim 1, wherein said intermediate representation is the Dil Intermediate Language (DIL). 9. The method of claim 1 wherein: discovering a fitting data flow model comprises: generating a data flow signature for the respective identified data flow; and comparing the generated data flow signature to a plurality of stored predetermined data flow signatures, each stored predetermined data flow signature representing a known data flow model; and discovering a fitting control flow model comprises: generating a control flow signature for the respective identified control flow; and comparing the generated control flow signature to a plurality of stored predetermined control flow signatures, each stored predetermined control flow signature representing a known control flow model. 10. An apparatus for analyzing executable software code by decompiling said executable code, comprising: first means for parsing said executable software code to identify one or more data flows; means for recursively, for each identified one or more data flow: discovering a fitting data flow model fitting the respective identified data flow; optimizing said fitting data flow model as a function of the respective identified data flow to form a refined data flow model; propagating said refined data flow model as a function of the respective data flow until substantially all data variables are modeled; and expressing said refined data flow model in an intermediate representation; second means for parsing said executable software code to identify one or more control flows; means for recursively, for each identified one or more control flow: discovering a fitting control flow model fitting the respective identified control flow, comprising one or more control branches; optimizing said fitting control flow model as a function of the respective identified control flow to form a refined control flow model; propagating said refined control flow model as a function of the respective identified control flow until substantially all said control branches are modeled; and expressing said refined control flow model in said intermediate representation; wherein said refined data flow model and said refined control flow model express a nanocode model of said executable software code in said intermediate representation. 11. The apparatus of claim 10, further comprising means for translating said intermediate representation into a high-level language. 12. The apparatus of claim 10, further comprising means for analyzing said nanocode model. 13. The apparatus of claim 12, wherein said means for analyzing further comprises: means for comparing said nanocode model to a reference nanocode model; means for forming a report listing differences; and means for flagging said differences according to risk severity inherent therein. 14. The apparatus of claim 12, wherein said means for analyzing further comprises: means for performing one or more analytic tasks using one or more corresponding pre-defined task scripts, said task scripts comprising a plurality of search, control, and/or data instructions to be executed by a control process and producing a result; and means for forming a report based on said results of said scripts. 15. The apparatus of claim 14, wherein said task scripts comprise pre-existing scripts and scripts adapted from previous uses. 16. The apparatus of claim 14, wherein said report comprises plain language statements and one or more optional nanocode model annotations. 17. The apparatus of claim 10, wherein said intermediate representation is the Dil Intermediate Language (DIL). 18. The apparatus of claim 10, wherein: discovering a fitting data flow model comprises: generating a data flow signature for the respective identified data flow; and comparing the generated data flow signature to a plurality of stored predetermined data flow signatures, each stored predetermined data flow signature representing a known data flow model; and discovering a fitting control flow model comprises: generating a control flow signature for the respective identified control flow; and comparing the generated control flow signature to a plurality of stored predetermined control flow signatures, each stored predetermined control flow signature representing a known control flow model. 19. A computer system for use in analyzing executable software code by decompiling said executable code, the system comprising computer instructions for: parsing said executable software code to identify one or more data flows; recursively, for each identified one or more data flow: discovering a fitting data flow model fitting the respective identified data flow; optimizing said fitting data flow model as a function of the respective identified data flow to form a refined data flow model; propagating said refined data flow model as a function of the respective identified data flow until substantially all data variables are modeled; and expressing said refined data flow model in an intermediate representation; parsing said executable software code to identify one or more control flows; recursively, for each identified one or more control flow: discovering a fitting control flow model fitting the respective identified control flow comprising one or more control branches; optimizing said fitting control flow model as a function of the respective identified control flow to form a refined control flow model; propagating said refined control flow model as a function of the respective identified control flow until substantially all said control branches are modeled; and expressing said refined control flow model in said intermediate representation; wherein said refined data flow model and said refined control flow model express a nanocode model of said executable software code in said intermediate representation. 20. The computer system of claim 19, further comprising computer instructions for translating said intermediate representation into a high-level language. 21. The computer system of claim 19, further comprising computer instructions for analyzing said nanocode model. 22. The computer system of claim 21, wherein said computer instructions for analyzing further comprise computer instructions for: comparing said nanocode model to a reference nanocode model; forming a report listing differences; and flagging said differences according to risk severity inherent therein. 23. The computer system of claim 21, wherein said computer instructions for analyzing further comprise computer instructions for: performing one or more analytic tasks using one or more corresponding pre-defined task scripts, said task scripts comprising a plurality of search, control, and/or data instructions to be executed by a control process and producing a result; and forming a report based on said results of said scripts. 24. The computer system of claim 23, wherein said task scripts comprise pre-existing scripts and scripts adapted from previous uses. 25. The computer system of claim 23, wherein said report comprises plain language statements and one or more optional nanocode model annotations. 26. The computer system of claim 19, wherein said intermediate representation is the Dil Intermediate Language (DIL). 27. The system of claim 19, wherein: discovering a fitting data flow model comprises: generating a data flow signature for the respective identified data flow; and comparing the generated data flow signature to a plurality of stored predetermined data flow signatures, each stored predetermined data flow signature representing a known data flow model; and discovering a fitting control flow model comprises: generating a control flow signature for the respective identified control flow; and comparing the generated control flow signature to a plurality of stored predetermined control flow signatures, each stored predetermined control flow signature representing a known control flow model. 28. A computer-readable medium storing a computer program for use in analyzing executable software code by decompiling said executable code, said computer program executable by a plurality of server computers, the medium comprising computer instructions for: parsing said executable software code to identify one or more data flows; recursively, for each identified one or more data flow: discovering a filling data flow model fitting the respective identified data flow; optimizing said filling data flow model as a function of the respective identified data flow to form a refined data flow model; propagating said refined data flow model as a function of the respective identified data flow until substantially all data variables are modeled; and expressing said refined data flow model in an intermediate representation; parsing said executable software code to identify one or more control flows; recursively, for each identified one or more control flow: discovering a filling control flow model fitting the respective identified control flow comprising one or more control branches; optimizing said filling control flow model as a function of the respective identified control flow to form a refined control flow model; propagating said refined control flow model as a function of the respective identified control flow until substantially all said control branches are modeled; and expressing said refined control flow model in said intermediate representation; wherein said refined data flow model and said refined control flow model express a nanocode model of said executable software code in said intermediate representation. 29. The computer-readable medium of claim 28, further comprising computer instructions for translating said intermediate representation into a high-level language. 30. The computer-readable medium of claim 28, further comprising computer instructions for analyzing said nanocode model. 31. The computer-readable medium of claim 30, wherein said computer instructions for analyzing further comprise computer instructions for: comparing said nanocode model to a reference nanocode model; forming a report listing differences; and flagging said differences according to risk severity inherent therein. 32. The computer-readable medium of claim 30, wherein said computer instructions for analyzing further comprise computer instructions for: performing one or more analytic tasks using one or more corresponding pre-defined task scripts, said task scripts comprising a plurality of search, control, and/or data instructions to be executed by a control process and producing a result; and forming a report based on said results of said scripts. 33. The computer-readable medium of claim 32, wherein said task scripts comprise pre-existing scripts and scripts adapted from previous uses. 34. The computer-readable medium of claim 32, wherein said report comprises plain language statements and one or more optional nanocode model annotations. 35. The computer-readable medium of claim 28, wherein said intermediate representation is the Dil Intermediate Language (DIL). 36. The computer-readable medium of claim 28, wherein: discovering a fitting data flow model comprises: generating a data flow signature for the respective identified data flow; and comparing the generated data flow signature to a plurality of stored predetermined data flow signatures, each stored predetermined data flow signature representing a known data flow model; and discovering a fitting control flow model comprises: generating a control flow signature for the respective identified control flow; and comparing the generated control flow signature to a plurality of stored predetermined control flow signatures, each stored predetermined control flow signature representing a known control flow model. 
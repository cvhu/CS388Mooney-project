A method for processing information about a polygonal pattern in the context of pattern recognition in a computer environment, the method comprising the steps of: (a) taking the corners of the pattern in turn in order from a first of the corners through the last of the corners, forming a first ordered sequence M of values representing the respective scalar distances between each corner of the polygonal pattern and each other corner, the sequence including (i) the distances between said first of said corners and each other corner in turn and (ii) taking each other corner in turn, the distances between that other corner and each other corner starting with the said first corner, and (iii) including at appropriate positions in the sequence zero values to correspond to the distance between each corner and itself; (b) re-ordering the values of said first sequence M to form a second ordered sequence P.sub.1 comprising a set of values p.sub.1 which includes for each corner starting with said first corner, values in a series starting with and including the said zero value for that corner and including the other values for that corner in one direction through, the order in which they appear in said first sequence; and (c) converting said values in the second ordered sequence P.sub.1 to respective equal-length character strings representative of the values.
Claims What is claimed is: 1. A method for processing information about a polygonal pattern in the context of pattern recognition in a computer environment, the method comprising the steps of: (a) taking the corners of the pattern in turn in order from a first of the corners through the last of the corners, forming a first ordered sequence M of values representing the respective scalar distances between each corner of the polygonal pattern and each other corner, the sequence including (i) the distances between said first of said corners and each other corner in turn and (ii) taking each other corner in turn, the distances between that other corner and each other corner starting with the first corner, and (iii) including at appropriate positions in the sequence zero values to correspond to the distance between each corner and itself; (b) re-ordering the values of said first sequence M to form a second ordered sequence P.sub.1 comprising a set of values p, which includes for each corner starting with said first corner, values in a series starting with and including the zero value for that corner and including the other values for that corner in one direction through, the order in which they appear in said first sequence; and (c) converting said values in the second ordered sequence P.sub.1 to respective equal-length character strings representative of the values. 2. A method according to claim 1, wherein said step (b) comprises forming said second ordered sequence P.sub.1 to include said set of values p.sub.1 twice in succession for the sequence P.sub.1 to comprise p.sub.1 p.sub.1. 3. A method according to claim 1, including the steps of: (d) re-ordering the values of said first sequence M to form a third ordered sequence P.sub.2 comprising a set of values p.sub.2 which includes, for each corner starting with the last corner, values in a series starting including the zero value for that corner and including the other values for that corner in the direction opposite to said one direction through the order in which they appear in said first sequence; and (e) converting said values in third ordered sequence P.sub.2 to respective equal-length character strings representative of the values. 4. A method according to claim 3, wherein said step (d) comprises forming said third ordered sequence P.sub.2 to include said set of values p.sub.2 twice in succession for the sequence P.sub.2 to comprise p.sub.2 p.sub.2. 5. A method according to claim 3, wherein said step (d) comprises converting said values in the third sequence P.sub.2 to exponential notation. 6. A method according to claim 1, wherein said step (c) comprises converting said values in the second sequences P.sub.1 to exponential notation. 7. A method according to claim 1, wherein said step (a) includes normalising the values in said first sequence by dividing each value in the sequence prior to normalization by the largest value. 8. A method according to claim 1, wherein said stop (a) comprises storing and processing said first sequence M in said computer environment as a matrix. 9. A method according to claim 1, including carrying out said steps (a) to (c) in respect of a first polygonal pattern, carrying out said steps (a) to (c) in respect of a second polygonal pattern, and comparing the converted values relating to the first pattern with the converted values relating to the second pattern by way of a computer-coded string-comparison command. 10. A method according to claim 1, including carrying out said steps (a) to (c) for a first pattern and comparing said converted values for said first pattern with predetermined values representative of a selection of further patterns by way of a computer-coded string search command. 11. A system for processing information about a polygonal pattern in the context of pattern recognition, the system comprising a computer with a central processor unit and storage means connected to the processor unit, and the system including: (a) taking corners of the pattern in turn in order from a first of the corners through the last of the corners, forming means for forming a first ordered sequence M of values representing the respective scalar distances between each corner of the polygonal pattern and each other corner, the sequence including (i) the distances between said first of said corners and each other corner in turn and (ii) taking each other corner in turn, the distances between that other corner and each other corner starting with the first corner, and (iii) including at appropriate positions in the sequence zero values to correspond to the distance between each corner and itself; (b) re-ordering means for re-ordering the values of said first sequence M to form a second ordered sequence P.sub.1 comprising a set of values p.sub.1 which includes for each corner starting with said first corner, values in a series starting with and including the zero value for that corner and including the other values for that corner in one direction through, the order in which they appear in said first sequence; and (c) converting means for converting said values in the second ordered sequence P.sub.1 to respective equal-length character strings representative of the values. 12. A system according to claim 11, wherein said re-ordering means is operable for forming said second ordered sequence P.sub.1 to include said set of values p.sub.1 twice in succession for the sequence P.sub.1 to comprise p.sub.1 p.sub.1. 13. A system according to claim 11, wherein: (d) said re-ordering means is further operable for re-ordering the values of said first sequence M to form a third ordered sequence P.sub.2 comprising a set of values p.sub.2 which includes, for each corner starting with the last corner, values in a series starting with and including the zero value for that corner and including the other values for that corner in the direction opposite to said one direction through the order in which they appear in said first sequence; and (e) said converting means is further operable for converting said values in the third ordered sequence P.sub.2 to respective equal-length character strings representative of the values. 14. A system according to claim 13, wherein said re-ordering means is operable for forming said third ordered sequence P.sub.2 to include said set of values p2 twice in succession for the sequence P.sub.2 to comprise p.sub.2 p.sub.2. 15. A system according to claim 13, wherein said converting means is operable for converting said values in the third sequence P.sub.2 to exponential notation. 16. A system according to claim 11, wherein said converting means is operable for converting said values in the second sequence P.sub.1 to exponential notation. 17. A system according to claim 11, wherein said forming means is operable for normalising the values in said first sequence by dividing each value in the sequence prior to normalization by the largest value. 18. A system according to claim 11, wherein said forming means is operable for storing and processing said first sequence M in said computer environment as a matrix. 19. A system according to claim 11, wherein the forming means, re-ordering means and converting means are operable together for forming string values representative of a first polygonal pattern, and then for forming string values representative of a second polygonal pattern, and wherein said system further comprises comparing the converted values relating to the first pattern with the converted values relating to the second pattern by way of a computer-coded string-comparison command. 20. A system according to claim 11, including means for comparing said converted values for said pattern with predetermined values representative of a selection of further patterns by way of a computer-coded string search command. 21. A computer program product comprising a body of computer code embodied in a computer medium for processing information about a polygonal pattern in the context of pattern recognition in a computer environment, the computer code comprising: (a) taking corners of the pattern in turn in order from a first of the corners through the last of the corners, or first portion of said computer code for forming a first ordered sequence M of values representing the respective scalar distances between each corner of the polygonal pattern and each other corner, the sequence including (i) the distances between said first of said corners and each other corner in turn and (ii) taking each other corner in turn, the distances between that other corner and each other corner starting with the first corner, and (iii) including at appropriate positions in the sequence zero values to correspond to the distance between each corner and itself; (b) a second portion of said computer code for re-ordering the values of said first sequence M to form a second ordered sequence P.sub.1 comprising a set of values p.sub.2 which includes for each corner starting with said first corner, values in a series starting with and including the zero value for that corner and including the other values for that corner in one direction through, the order in which they appear in said first sequence; and (c) a third portion of said computer code for converting said values in the second ordered sequence P.sub.1 to respective equal-length character strings representative of the values. 22. A program product according to claim 21, wherein said second code portion is operable for forming said second ordered sequence P.sub.1 to include said set of values p.sub.1 twice in succession for the sequence P.sub.1 to comprise p.sub.1 p.sub.1. 23. A program product according to claim 21, wherein: (d) the second portion of said code is operable for re-ordering the values of said first sequence M to form a third ordered sequence P.sub.2 comprising a set of values p.sub.2 which includes, for each corner starting with the last corner, values in a series starting with and including the zero value for that corner and including the other values for that corner in the direction opposite to said one direction through the order in which they appear in said first sequence; and (e) the third portion of said code is operable for converting said values in the third ordered sequence P.sub.2 to respective equal-length character strings representative of the values. 24. A program product according to claim 23, wherein said second portion of said code is operable for forming said third ordered sequence P.sub.2 to include said set of values p.sub.2 twice in succession for the sequence P.sub.2 to comprise p.sub.2 p.sub.2. 25. A program product according to claim 23, wherein said third portion of computer code is operable for converting said values in the third sequence P.sub.2 to exponential notation. 26. A program product according to claim 21, wherein said third portion of computer code is operable for converting said values in the second sequence P.sub.1 to exponential notation. 27. A program product according to claim 21, wherein said first portion of computer code is operable for normalising the values in said first sequence by dividing each value by the largest value in the sequence prior to normalization. 28. A program product according to claim 21, wherein said first portion of computer code is operable for storing and processing said first sequence M in said computer environment as a matrix. 29. A program product according to claim 21, wherein said portions of computer code are operable together for forming a character-strings representative of a first polygon pattern and a character-string representative of a second polygonal pattern and the computer code comprises a fourth portion operable for comparing the converted values relating to the first pattern with the converted values relating to the second pattern by way of a computer-coded string-comparison command. 30. A program product according to claim 21, including a fourth program portion for comparing said converted values for said pattern with predetermined values representative of a selection of further patterns by way of a computer-coded string search command. 
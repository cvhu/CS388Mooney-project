The present invention is a three-dimensional vector co-processing system (3DVCP) including the datapath of a three-dimensional vector co-processor having a register-to-register architecture and being coupled to a general-purpose processor. The source multiplexer and the destination multiplexer of the co-processor uses full cross-bar switches. As such, the three-dimensional co-processor evaluates three-dimensional vectors and scalars while the general-purpose processor performs the other "general purpose" functions. The 3DVCP includes a co-processor interface for synchronizing the three-dimensional vector co-processor and the general-purpose processor. With this interface, the general-purpose processor controls the address bus and control lines of the data bus. The three-dimensional vector co-processor also has an instruction set that enables the control unit to pipeline the program instructions in stages in addition to instruction fetch, fetch instruction, instruction execute, and store-result. The 3DVCP specifically targets vectors of length 3, and expoits the intrinsic parallelism by providing three parallel execution units that can simultaneously operate on all three vector components. Scalar processing does not suffer with this parallel execution approach, whereas it does with a pipelined approach. The execution units are used individually for scalar operations.
Claims We claim: 1. A processor capable of receiving and execution a series of instructions provided from a memory, for carrying out vector/vector and scalar/vector arithmetic operations, comprising. a. a data transfer input for receiving the series of program instructions and data from the memory; b. I, J, and K register files coupled to said said data transfer input for receiving operands therefrom, each containing a plurality of registers for storing scalar values for the three scalar components of three-dimensional vectors, c. I, J, and K execution units coupled to said I, J, and K register files for performing arithmetic operations on operands placed in the execution units, d. I, J, and K operand pathways connecting each I, J, and K register file, respectively, with the corresponding I, J, and K execution unit, for transferring operands stored in selected register locations to the corresponding execution units, in response to data-fetch commands carried in the program instructions, e. first and second broadcast buffers connecting first and second pairs of operand pathways for passing operands between the two pathways in each pair of said operand pathways, in response to pathway exchange commands carried in the program instructions, f. data-return means coupled to said I, J, and K execution unit and said I, J, and K register files for returning operands from the execution units to selected locations in the register files, in response to write-to-register commands in the program instruction, g. a data-transfer output for passing selected operands from the processor to the memory, in response to write-to-memory commands carried in the program instruction, and h. a program evaluation unit coupled to said I, J, and K register files for passing commands in the program instructions to the register files, the execution units, the broadcast buffers, the data-return means, and the data-transfer input and output. 2. The processor of claim 1, wherein each execution unit includes an arithmetic logic unit and a multiplication unit. 3. The processor of claim 2, wherein each operand pathway includes first and second latches, first and second data buses connecting the I, J, and K registers with the first and second latches, respectively, a third data bus connecting the first latch with the corresponding arithmetic logic unit and multiplication unit, and a fourth data bus connecting the second latch with the multiplication unit. 4. The processor of claim 2, which further includes, for each execution unit, multiplexing means for directing the contents of the second latch or a constant value from the program evaluation unit to the associated arithmetic unit, in response to commands in the program instructions. 5. The processor of claim 4, wherein said multiplexing means includes a third latch for staging the contents of the second latch, and the contents of each of the third latches can be transferred to memory. 6. The processor of claim 1, where in the data return means includes multiplexing means associated with the execution units for writing the results of the execution units into selected register file locations. 7. The processor of claim 1, which further includes a CORDIC algorithm successive-add unit which implements two-dimensional coordinate rotations, using operands obtained from the three register files, and said shift-and-add unit includes latches for storing the output values of the algorithm operation, for use as operands in subsequent program instructions. 8. The processor of claim 1, wherein the program instructions are pipelined from the program evaluation unit in fetch-operand, execute, and store-result stages. 9. The processor of claim 8, wherein the processor clock speed is less than 100 nsec. 10. A processor capable of acting on a series of program instructions for carrying out vector/scalar, and scalar/vector arithmetic operations on three-dimensional vectors and scalar/scalar arithmetic operations, comprising a. a memory for storing the program instructions and data and for storing the results of arithmetic operations performed in accordance with the program instructions, b. a data-transfer input coupled to said memory for receiving the series of program instructions and data from the memory, c. I, J, and K register files coupled to said data-transfer input for receiving operands therefrom, each containing a plurality of registers for storing scalar values for the three vectors components of three-dimensional vectors, d. I, J, and K execution units coupled to said I, J, and K register files for performing arithmetic operations on operands placed in the execution units, e. I, J, and K operand pathways connecting each I, J, and K register file, respectively, with the corresponding I, J, and K execution unit, for transferring operands stored in selected register locations to the corresponding execution units, in response to data-fetch commands carried in the program instructions, f. first and second broadcast buffers connecting first and second parts of operand pathways, for passing operands between the two pathways in each pair, in response to pathway exchange commands carried in the program instructions, g. data-return means for returning operands from the execution units to selected locations in the register files, in response to write-to-register commands in the program instruction, h. a data-transfer output for passing selected operands to the memory, in response to write-to-memory commands carried in the program memory, and i. a program evaluation unit coupled to said I, J, and K register files for passing commands in the program instructions to the register files, the execution units, the broadcast buffers, the data-return means, and the data-transfer input and output. 11. The processor of claim 10, wherein the memory includes a program memory for storing program instructions, and a data memory for storing operands needed for program execution. 12. The processor of claim 10, for use in a robotics control device for calculating kinematic and dynamic solutions needed to control robotic motion. 13. The processor of claim 12, where in the calculations involving performing vector cross product, vector addition, scalar/vector multiplication, and scalar addition calculations. 14. The processor of claim 13, wherein the calculations further include vector rotation and trigonometric function calculations, and the processor further includes a CORDIC algorithm successive-add unit which implements two-dimensional coordinate rotations, using operands obtained from the three register files, and said successive-add unit includes latches for storing the output values of the algorithm operation for use in subsequent program instructions. 15. A three-dimensional vector processing system for accelerating the computation of 3-D calculations without impairing the performance of other general-purpose operations, said system comprising: a system bus for carrying address, data, and control information; a general-purpose processor having an I/O interface coupled to said system bus and a general co-processor interface; a memory coupled to said system bus, said memory storing a series of program instructions and data; a co-processor coupled to said general-purpose processor and to said memory over said system bus for reading and processing said instructions and data under the control of said general-purpose processor, said co-processor further being coupled to said general-purpose processor over said general co-processor interface for synchronizing the execution of instructions targeted for said general-purpose processor and said co-processor, said co-processor further including: a. a data transfer input for receiving said series of program instructions and data from the memory; b. I, J and K register files coupled to said data transfer input for storing scalar values for the three scalar components of three-dimensional vectors in a plurality of registers; c. a source multiplexer coupled to said I, J and K register files for receiving operands therefrom; d. I, J and K execution units coupled to said source multiplexer for receiving resultant operands therefrom, said I, J and K execution units performing arithmetic and logical operations on said resultant operands stored in said execution unit; e. I, J and K operand pathways connecting each I, J and K register file, respectively, with the corresponding I, J and K execution unit, for transferring operands stored in selected register locations to the corresponding execution units, in response to data-fetch commands carried in the program instructions; f. a destination multiplexer coupled to said I, J, and K execution units for receiving processed operands therefrom, said destination multiplexer further changing the order of said processed operands, said destination multiplexer outputting selected operands; g. data-return means coupled to said destination multiplexer for receiving said selected operands therefrom, said data-return means further returning said selected operands to selected locations in said register files in response to receiving write-to-register commands in the program instruction, h. a data-transfer output coupled to said I, J and K register files for passing selected operands from the co-processor to the memory, in response to write-to-memory commands carried in the program instruction, and i. a control unit coupled between said system bus and said I, J and K register file for passing commands in said program instructions to said register files, said execution units, said source and destination multiplexers, said data-return means, and said data-transfer input and output. 16. The processing system of claim 15, wherein each execution unit includes an arithmetic logic unit and a multiplication unit. 17. The processing system of claim 15, wherein said source multiplexer is configured as a full cross-bar switch for directing the contents of said I, J and K register file or a constant value from said control unit to the associated arithmetic unit, in response to commands in the program instructions. 18. The processing system of claim 15, wherein said destination multiplexer is configured as a full cross-bar switch for changing the order of said processed operands before transmitting said selected operands to said I, J and K register file over said data return means. 19. The processing system of claim 15 further comprising a program evaluation unit wherein the program instructions are pipelined from the program evaluation unit in instruction fetch, fetch-operand, instruction execute, and store-result stages. 
A data construct set and method for use with an industrial process which is controlled according to execution code wherein a processor running the code generates requests to mechanical resources to cause the resources to perform the process, the construct enabling generation of diagnostic code interspersed within the execution code which, when an event is to occur, indicates the event to occur, the invention also including status based diagnostics generally and methods of using the data construct set for generating both execution code and status based diagnostics.
Claims To apprize the public of the scope of this invention, the following claims are made: 1. A development tool for use with a processor and a display, the processor for running execution code for controlling control mechanism sets which in turn control resources to perform an industrial process, the tool for generating execution code which includes a status based diagnostic agent which indicates progression of the execution code via the display, the tool comprising: for each mechanism set:a control assembly (CA) encapsulating at least: an execution logic specification specifying resource requests to the mechanism sets, at least a sub-set of the requests including sequential request events; and a diagnostic specification specifying events corresponding to at least a sub-set of the execution logic requests; whereby CA instances can be instantiated such that the combined instantiated CAs specify information required to generate execution code including status based diagnostics indicating the next event expected to occur, for the industrial process. 2. The tool of claim 1 wherein, for at least a sub-set of requests, the events includes termination events indicating the end of a request and wherein commencement of one request depends on completion of the termination event corresponding to a previous request. 3. The tool of claim 2 wherein, for at least a sub-set of requests, the event includes intermediate events. 4. The tool of claim 1 wherein each mechanism set is controllable and monitorable via I/O signals and has states corresponding to specific I/O combinations and wherein the events correspond to specific states. 5. The tool of claim 1 wherein each mechanism set is controllable and monitorable via I/O signals and has states corresponding to specific I/O combinations, the execution logic specification specifying mechanisms within the corresponding mechanism set, mechanism sub-mechanisms, mechanism I/O and request event I/O combinations. 6. The tool of claim 5 wherein the request events include termination events. 7. The tool of claim 5 wherein the request events include intermediate events. 8. The tool of claim 1 wherein at least a sub-set of the diagnostic specifications are parameterizable. 9. A method for use with a processor and an editor, the processor running execution code to control control mechanism sets which in turn control resources which perform an industrial process, the processor controlling by providing requests to the mechanism sets, at least a sub-set of requests including request events, the method for providing a programming tool to be used in conjunction with the editor to specify execution code including status based diagnostics and including the steps of, for each mechanism set: encapsulating in a control assembly (CA): an execution logic specification pecifying resource requests to the mechanism sets, at least a sub-set of the requests including sequential request events; and a diagnostic specification pecifying events corresponding to at least a sub-set of the resource requests. 10. The method of claim 9 also for specifying the execution code including status based diagnostics and, to this end, further including the step of, after encapsulating: instantiating CAs such that the combined instantiated CAs specify execution code, including status based diagnostics indicating the next event expected to occur, for the industrial process. 11. The method of claim 10 also for generating the execution code including status based diagnostics and, to this end, further including the step of, after instantiating: compiling the CA instances to provide the execution code. 12. The method of claim 9 wherein, for at least a sub-set of requests, the events includes termination events indicating the end of a request and wherein commencement of one request depends on completion of the termination event corresponding to a previous request. 13. The method of claim 9 wherein, for at least a sub-set of requests, the event includes intermediate events. 14. The method of claim 9 wherein each mechanism set is controllable and monitorable via I/O signals and has states corresponding to specific I/O combinations and wherein the events correspond to specific states. 15. The method of claim 9 wherein the diagnostic specification is parameterizable and wherein the step of instantiating includes parameterizing the diagnostic specification. 
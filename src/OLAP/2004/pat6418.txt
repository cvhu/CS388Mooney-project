A development tool combines advantages of a simulation tool with an object-oriented modeling tool, including a real-time mathematical matrix library and an object model. The tool is applicable to any intelligent control system. A composite object group (COG) contains both sampled-data and event-driven capabilities. Mapping the computing resources of a computing device throughout the hierarchy of a control system is provided for modes, executable programs and threads of a processor. Within a given processor, each component of a control system may be assigned to individual execution threads within that processor simply by naming a thread.
Claims We claim: 1. A method of defining modes of operation for, and mapping said modes through, a hierarchical system, wherein said hierarchical system comprises a multi-level hierarchy, with a set of components at each level, said method comprising defining one or more modes at each level by a. identifying an intuitive name for a mode; and b. choosing a subset of said set of components in said level; and c. choosing a sub-mode for each chosen component, so that said mode is defined by the sub-modes of the chosen components, where in the simplest (end condition) case, said sub-mode indicates if the component is active or not, whereby when said level is executing in said mode, only active components will execute. d. Repeating steps a-c until modes defined at any level in the hierarchy are mapped to sub-modes down the hierarchy, whereby when said hierarchy is executing, only active components will execute throughout the hierarchy. 2. A method as recited in claim 1 wherein said hierarchical system is a control system. 3. A method as recited in claim 1 wherein said hierarchical system is a real-time control system. 4. A method as recited in claim 1 wherein said components are represented in a graphical user interface and said choosing said subset of components includes selecting said sub-modes using said graphical user interface. 5. A method as recited in claim 1 wherein said components are represented in a graphical user interface and said choosing said submodes includes selecting said subset of components using said graphical user interface, whereby said subset of components are visually distinguished from components not in said subset. 6. A method as recited in claim 1 wherein said hierarchical system is a control system, and said components are executing said control system on a computer. 7. A method as recited in claim 6 further comprising: switching from said mode to a different mode while said control system is executing; deactivating those components that correspond to said mode; and activating those components that correspond to said different mode. 8. A method of mapping a thread of a processor to components within a control system, wherein said control system comprises a plurality of components in a multi-level hierarchy, said method comprising: a. defining one or more logical rates of execution at each level in said multi-level hierarchy; b. for each component in a level of said multi-level hierarchy, assigning said component to one or more of said logical rates; and c. mapping said thread of said processor to one or more of said logical rates, thus mapping said thread through said multi-level hierarchy, resulting in a system of components, executing at the actual execution rate of said thread. 9. A method as recited in claim 8 wherein said control system is a real-time control system. 10. A method as recited in claim 8 wherein said components are represented in a graphical user interface and said process of assigning includes selecting components at each level using said graphical user interface, and defining said logical rates of execution using said graphical user interface. 11. A method as recited in claim 8 wherein said components are executing on a real-time computer. 12. A method as recited in claim 8 wherein multiple threads are mapped to multiple components, wherein each component may be assigned one or multiple logical rates and each said logical rate mapped to a thread. 13. A method of defining an executable image for a multi-level hierarchy control system comprising a plurality of components, said method comprising a. choosing a subset of said components to correspond to said executable image; b. identifying a name for said executable image and its corresponding subset of said components; and c. for each chosen component in said subset, indicating that said component is part of said executable image for said multi-level hierarchy control system, whereby when said executable image is produced for said multi-level hierarchy control system, only said subset of said components that correspond to said executable image will be included. 14. A method as recited in claim 13 wherein said control system is an electromechanical control system. 15. A method as recited in claim 13 wherein said control system is a real-time control system. 16. A method as recited in claim 13 wherein said received components are represented in a graphical user interface and said element of choosing includes selecting said subset of components using said graphical user interface, whereby said subset of components are visually distinguished from components not in said executable image. 17. A method as recited in claim 13 further comprising: a. loading components corresponding to said executable image into a real-time computer; and b. executing said executable image on said real-time computer. 18. A method as recited in claim 13 whereby multiple executable images are generated, each destined for a different particular computer. 19. A method of defining an executable image for a control system, wherein said control system comprises a multi-level hierarchy, said method further comprising: a. defining at least one logical executable name or designator at each level; b. choosing a subset of components at each level to correspond to each said logical executable name; c. for each chosen component in each subset, indicating that said component is part of said logical executable name; d. continuing this process throughout the hierarchy, thus assigning components to logical executable names at each level; and e. mapping said executable image to said logical executable names throughout said multi-level hierarchy such that only the subset of said components assigned to the mapped said logical executable names will be included in the executable image. 20. A method as recited in claim 19 wherein said control system is a real-time control system. 21. A method as recited in claim 19 wherein said components are represented in a graphical user interface and said element of choosing includes selecting said subset of components using said graphical user interface, whereby said subset of components are visually distinguished from components not in said executable image. 22. A method as recited in claim 19 further comprising: a. loading components corresponding to said executable image into a real-time computer; and b. executing said executable image on said real-time computer. 23. A method as recited in claim 19 whereby multiple executable images are generated, each destined for a different particular computer. 
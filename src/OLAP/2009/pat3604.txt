The present invention relates generally to a software architecture for simulation of physical entities. The invention provides an object-oriented container based framework architecture for simulator software implementations, methods, and objects in a time domain on a distributed computer network. The invention further provides an interface system and a plug-in definition which allows compartmentalization of participants in the container and easy extensibility of the system.
Claims The invention claimed is: 1. A computer simulation environment for simulating a physical system on a distributed computer network, comprising: a simulation container providing an execution environment for plug-in applications and communication services to other containers residing on different computers, the simulation container providing a run loop management function; a views container in data communication with the simulation container and graphically displaying attributes of one or more objects within the execution environment; at least one participant object instantiated in the simulation container; and an interface means, incorporated into the participant object, for communication of information between the participant object and the simulation container. 2. The computer simulation environment of claim 1 wherein the participant object includes a set of physical parameters and a motion model defined by a plug-in. 3. The computer simulation environment of claim 2 wherein the plug-in is stored in a library. 4. The computer simulation environment of claim 3 wherein the library is loaded into the simulation container. 5. The computer simulation environment of claim 3 wherein the plug-in is modified before being loaded into the simulation container. 6. The computer simulation environment of claim 3 wherein the plug-in is modified after being loaded into the simulation container. 7. The computer simulation environment of claim 1 wherein the simulation container provides life cycle services to the participant object. 8. The computer simulation environment of claim 7 wherein the life cycle services include instantiation and termination. 9. The computer simulation environment of claim 1 wherein the simulation container provides an environment object further defining the execution environment. 10. The computer simulation environment of claim 1 wherein the simulation container provides an event posting service. 11. The computer simulation environment of claim 1 wherein the views container provides a graphical representation of properties of the participant object. 12. The computer simulation environment of claim 1 wherein the views container provides a graphical representation of the properties of an environment object. 13. The computer simulation environment of claim 1 wherein the participant object communicates with the views container through a data bus. 14. The computer simulation environment of claim 1 wherein the participant object communicates with the views container through an event posting service. 15. The computer simulation environment of claim 1 further comprising a secondary simulation container in data communication with the simulation container and the views container. 16. The computer simulation environment of claim 1 wherein the simulation container and the views container are resident on separate computers on the computer network. 17. The computer simulation environment of claim 1 wherein the participant object is in communication with the views container. 18. The computer simulation environment of claim 1 wherein the participant object communicates with the simulation container through a simulation container interface and with the views container through a views container interface. 19. The computer simulation environment of claim 1 wherein the participant object is an entity object in data communication with a nonentity object. 20. The computer simulation environment of claim 1 wherein the hardware device is a switch. 21. The computer simulation environment of claim 1 wherein the participant object is a nonentity object in data communication with an entity object. 22. The computer simulation environment of claim 21 wherein the non-entity object communicates with a hardware device. 23. The computer simulation environment of claim 22 wherein the hardware device is a computer. 24. The computer simulation environment of claim 1 further comprising a participant object instantiated in the container and a view object instantiated in the views container. 25. The computer simulation environment of claim 24 wherein the participant object communicates with the view object through a communication interface. 26. The computer simulation environment of claim 24 wherein the participant object communicates with the view object through an event posting service. 27. The computer simulation environment of claim 24 wherein the participant object communicates with the view object through a data bus. 28. The computer simulation environment of claim 1 wherein the participant object contains a model of a physical entity. 29. The computer simulation environment of claim 28 wherein the physical entity is a vehicle. 30. The computer simulation environment of claim 28 wherein the physical entity is an airplane. 31. The computer simulation environment of claim 1 wherein the participant object contains a set of initial conditions. 32. The computer simulation environment of claim 1 wherein the simulation container is resident on a computer system. 33. The computer simulation environment of claim 32 wherein the computer system is the computer network. 34. A container based architecture for simulation of a physical system in a time domain on a distributed computer network comprising: a simulation container providing an execution environment for plug-in applications and communication services to other containers residing on different computers, the simulation container providing a run loop management function; a views container in data communication with the simulation container and graphically displaying attributes of one or more objects within the execution environment; an environment object further defining the execution environment; an update cycle controlling time advancement in the simulation; and a participant object instantiated in the simulation container and communicating with the simulation container and the environment object and being responsive to the update cycle. 35. The architecture of claim 34 wherein the update cycle is a method of the simulation container. 36. The architecture of claim 34 wherein the participant object includes a network communication mechanism. 37. The architecture of claim 34 wherein the participant object includes a method related to calculation of a change in a state of an entity. 38. The architecture of claim 34 wherein the participant object includes a method related to calculation of physical forces. 39. The architecture of claim 34 wherein the participant object includes a method related to deflection of a physical entity. 40. The architecture of claim 34 wherein the participant object includes a method related to change of a physical entity. 41. The architecture of claim 34 wherein an interface is defined that permits a component to interact with the participant object and the simulation container. 42. The architecture of claim 41 wherein a plug-in defines a component that implements the method of claim 37. 43. The architecture of claim 34 further comprising the views container in communication with the participant object. 44. The architecture of claim 43 wherein the views container includes at least one method to graphically display data generated by the participant object using a graphical display. 45. The architecture of claim 44 wherein the participant object data is related to flight of an aircraft. 46. The architecture of claim 44 wherein the graphical display includes a display of sensor data. 47. The architecture of claim 43 wherein the views container implements an interface including at least one method. 48. The architecture of claim 47 wherein a participant plug-in includes a secondary interface defined by the interface. 49. The architecture of claim 43 further comprising a communication means for sharing data between the simulation container and the views container over the network. 50. The architecture of claim 49 wherein the simulation container and the views container reside on different computers on the network. 51. The architecture of claim 34 further comprising an operator console container in communication with the simulation container. 52. The architecture of claim 51 wherein the operator console container defines an entity control interface. 53. The architecture of claim 51 wherein the operator console container defines an environment control interface. 54. The architecture of claim 51 wherein the operator console container defines a non-entity control interface. 55. The architecture of claim 34 further comprising a non-entity object in communication with the simulation container. 56. The architecture of claim 55 wherein the non-entity object implements an interface expected by the simulation container. 57. The architecture of claim 56 wherein the non-entity object communicates with a hardware device. 58. The architecture of claim 34 wherein the participant object is defined by a plug-in. 59. The architecture of claim 58 wherein the plug-in incorporates a simulation container class interface. 60. The architecture of claim 58 wherein the plug-in incorporates a mathematical model of a physical object. 61. The architecture of claim 34 wherein a scenario generator loads the participant object in the simulation container. 62. The architecture of claim 34 wherein the participant object includes a method related to operation of a static object. 63. The architecture of claim 62 wherein the static object is a building. 64. An object oriented framework for simulating a physical system on a distributed computer network, comprising: a simulation container providing an execution environment for plug-in applications and communication services to other containers residing on different computers, the simulation container providing a run loop management function; a participant object inheriting the run loop management function from the simulation container; an environment object modeling an attribute of the environment and implementing the run loop management function inherited from the simulation container; and a views container in data communication with the simulation container, defining at least one method and graphically displaying an attribute of a physical object using the method. 65. The framework of claim 64 wherein the participant object includes a plug-in implementing a simulation container interface. 66. The framework of claim 65 wherein the implementation includes a life cycle attribute of the participant object. 67. The framework of claim 65 wherein the participant object includes a plug-in referenced by the views container. 68. The framework of claim 67 wherein the implementation includes a display set of an aircraft. 69. The framework of claim 64 wherein the views container implements a views container interface. 70. The framework of claim 64 wherein the attribute of the physical object is one of position, velocity and acceleration. 71. The framework of claim 64 wherein the physical object is one of a vehicle, aircraft, stationary thing, living thing and plant. 72. The framework of claim 64 wherein the attribute of the environment is one of a group comprising: gravity, atmosphere, density, pressure and temperature. 73. he framework of claim 64 wherein the attribute of the environment is constant. 74. The framework of claim 64 wherein the attribute of the environment is dynamic. 75. The framework of claim 64 wherein the participant object includes a method to create a data bus for storing data related to the attribute of the physical object. 76. The framework of claim 75 wherein the simulation container provides a data mirror means for communicating data from the data bus to a remote data client. 77. The framework of claim 64 wherein the simulation container defines a method to create an event posting service to communicate data to the participant object upon receipt of a subscription request. 78. The framework of claim 64 wherein the simulation container defines a method to list an identity of the participant object. 79. The framework of claim 64 further comprising a non-entity object. 80. The framework of claim 79 wherein the non-entity object contains a means for communication with a hardware device. 81. The framework of claim 80 wherein the hardware device is an audio sound generator. 82. The framework of claim 80 wherein the hardware device is a user input data generator. 83. The framework of claim 64 further comprising an operator console views container in communication with the participant object. 84. The framework of claim 83 wherein the operator console views container communicates with a means for modifying data in the participant object. 85. The framework of claim 83 wherein the operator console container views object communicates with an interface for creation of inspector panels. 86. The framework of claim 85 wherein the participant object is defined by a plug-in which implements the interface. 87. The framework of claim 64 further comprising a mission overview views container in communication with the simulation container and defining a method to display data from the participant object and the environment. 88. A plug-in implemented on a computer in a distributed computer network for an object oriented simulation of a physical system on the distributed computer network, comprising: a data set stored on the computer defining physical parameters of a physical entity; a model implemented on the computer defining operational characteristics of the physical entity; a scenario generator means implemented on the computer to modify the data set; and an interface implemented on the computer facilitating communication between the physical entity and a simulation container, wherein the simulation container provides an execution environment for plug-in applications and communication services to other containers residing on different computers, the simulation container providing a run loop management function. 89. The plug-in of claim 88 further comprising: an inspector definition to define allowable changes in the physical parameters of the physical entity. 90. The plug-in of claim 88 further comprising: a display set to define graphical display parameters for display of data related to the physical parameters of the physical entity. 91. The plug-in of claim 88 further comprising: a display set to define graphical display parameters for display of data related to the operational characteristics. 92. The plug-in of claim 88 where the scenario generator means creates an extensible XML text file as the data set. 93. A method of creating a simulation container for simulating a physical system on a distributed computer network, comprising the steps of: providing a scenario generator on a computer; activating the scenario generator to create a plug-in library, the plug-in library being related to at least one participant object and at least one simulation container property; loading the plug-in library into a scenario loader on the computer; the scenario loader instantiating the simulation container on the computer and loading the plug-in library into the simulation container; the simulation container providing an execution environment for plug-in applications and providing communication services to other containers residing on different computers; and instantiating a participant object on the computer using a plug-in from the plug-in library loaded in the simulation container. 94. The method of claim 93 wherein the plug-in includes initial conditions. 95. The method of claim 93 wherein the plug-in library is defined in an XML text file. 96. The method of claim 93 wherein the participant object defines attributes of a physical object. 97. The method of claim 93 wherein the step of instantiating the simulation container further comprises instantiating an environment object. 98. The method of claim 93 wherein the step of instantiating the simulation container further comprises instantiating a view object. 99. The method of claim 93 wherein the step of instantiating the simulation container further comprises initiating and executing a run loop management function. 100. The method of claim 93 wherein the step of loading further comprises downloading the plug-in in the plug-in library from the computer network. 101. The method of claim 100 wherein the network is a Local Area Network (LAN). 102. The method of claim 100 wherein the network is a Wide Area Network (WAN). 103. The method of claim 100 wherein the network is an internet. 104. The method of claim 93 further comprising the step of instantiating an operator console views container. 105. The method of claim 93 further comprising the step of instantiating a mission overview views container. 106. The method of claim 93 further comprising the step of instantiating a view object. 107. A computer readable storage medium storing computer executable instructions that when executed on a distributed computer network simulates a physical system in a time domain, the medium storing instructions for: creating a simulation container providing an execution environment for plug-in applications and communication services to other containers residing on different computers, the simulation container providing a run loop management function; creating an update cycle controlling time advancement in the simulation; creating a participant object modeling a physical object in the simulation container in response to the update cycle; creating a views container in data communication with the simulation container and graphically displaying attributes of one or more objects within the execution environment; creating a view object within the views container and in data communication with the participant object to facilitate display of attributes of the participant object. 108. The medium of claim 107 wherein the participant object includes a method to communicate with the simulation container. 109. The medium of claim 107 wherein the participant object includes a data bus means for storing data related to the participant object. 110. The medium of claim 107 wherein the participant object includes a method related to calculation of a position of the physical object. 111. The medium of claim 107 wherein the participant object includes a method related to calculation of physical forces. 112. The medium of claim 107 wherein the participant object includes a method related to deflection of the physical object. 113. The medium of claim 107 wherein the participant object includes a method related to growth of the physical object. 114. The medium of claim 107 wherein the simulation container defines an interface comprising at least one method. 115. The medium of claim 112 wherein the participant object is defined by a plug-in implementing the method. 116. The medium of claim 107 wherein the views container includes at least one method to graphically display data generated by the participant object. 117. The medium of claim 116 wherein the participant object data is related to flight of an aircraft. 118. The medium of claim 116 wherein the views container includes an interface defining the at least one method. 119. The medium of claim 118 wherein the participant object is defined by a plug-in implementing the at least one method. 120. The medium of claim 116 further comprising instructions for a communication means for sharing data between the simulation container and the views container over the network. 121. The medium of claim 120 wherein the simulation container and the views container reside on different computers on the network. 122. The medium of claim 107 further comprising instructions for creating an operator console views container in communication with the simulation container. 123. The medium of claim 122 wherein the operator console views container includes an entity control interface. 124. The medium of claim 122 wherein the console views container includes an environment control interface. 125. The medium of claim 122 wherein the operator console views container includes a non-entity control interface. 126. The medium of claim 107 further comprising a non-entity object. 127. The medium of claim 126 wherein the non-entity object communicates with a hardware device. 128. The medium of claim 107 wherein the participant object includes a method related to operation of a vehicle. 129. The medium of claim 128 wherein the vehicle is an aircraft. 130. The medium of claim 107 wherein the participant object includes a method related to operation of a static object. 131. The medium of claim 107 wherein the static object is a building. 132. A method of extending a computer simulation system for simulating a physical system on a distributed computer network, comprising the steps of: providing on a computer a simulation container providing an execution environment for plug-in applications and communication interface to other containers residing on different computers, the simulation container providing a run loop management function; providing on the computer a plug-in which defines a first participant object and includes an interface for communication with the simulation container; instantiating on the computer the first participant object in the simulation container by implementing the plug-in within the simulation container; providing on the computer additional plug-ins to define additional participant objects and their interfaces; instantiating on the computer any of the additional participant objects by implementing corresponding additional plug-ins as required in the simulation, wherein the additional plug-ins implemented on the computer allows extending the computer simulation system. 133. The method of claim 132 comprising the further step of: scaling the computer simulation system by changing a parameter that defines the plug-in. 134. The method of claim 132 comprising the further steps of: extending the computer simulation system by providing a second plug-in and instantiating a second participant object in the simulation container, by implementing the second plug-in in the simulation container. 135. The method of claim 132 comprising the further step of scaling the computer simulation system by: providing a second computer simulation system having at least one participant instantiated therein; and connecting the computer simulation system to the second computer simulation system. 136. The method of claim 132 wherein the simulation container provides a run loop management service to the first participant object. 137. The method of claim 132 wherein the simulation container provides a life cycle management service to the first participant object. 138. The method of claim 132 wherein the simulation container provides an event posting service to the first participant object. 139. The method of claim 132 wherein the simulation container provides a simulation environment. 140. The method of claim 132 wherein the first participant object includes a communication means for communicating with analog devices. 141. The method of claim 132 further comprising the steps of: providing a views container requiring a view interface; and including the views interface in the first participant object. 142. The method of claim 134 comprising the further step of: providing a communication means for establishing communication between the first and second participant objects. 
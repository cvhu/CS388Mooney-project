A computer-implemented method for solving a constraint satisfaction problem (CSP), which is defined by variables and constraints applicable to the variables, and which has states corresponding to respective sets of values of the variables. The method includes assigning cost functions to the constraints so that the states have respective costs determined by application of the cost functions to the respective sets of values of the variables, the respective costs defining a problem topography of the CSP having global extrema corresponding to solutions of the CSP. The constraints of the CSP are reformulated so as to perform at least one of increasing a density of the solutions in the problem topography and smoothing a gradient of the problem topography. One or more of the solutions of the CSP are found by applying a stochastic CSP solver to the reformulated constraints.
Claims The invention claimed is: 1. A computer-implemented method for testing a system that includes a hardware device or software program, the method comprising: defining a constraint satisfaction problem (CSP) in terms of variables that are characteristic of .about. the system under test and constraints applicable to the variables, the CSP having states corresponding to respective sets of values of the variables; assigning cost functions to the constraints so that the states have respective costs determined by application of the cost functions to the respective sets of values of the variables, the respective costs defining a problem topography of the CSP having global extrema corresponding to solutions of the CSP; prior to attempting to find the solutions of the CSP, automatically reformulating the constraints of the CSP so as to perform at least one of increasing a density of the solutions in the problem topography and smoothing a gradient of the problem topography; finding one or more of the solutions of the CSP by applying a stochastic CSP solver to the reformulated constraints using at least one stochastic solution technique selected from a group of techniques consisting of local search, greedy local search, and variable-range hopping techniques; testing the system by applying the values of the variables indicated by the one or more of the solutions to inputs of the hardware device or software program; and verifying a design of the hardware device or software program responsively to the testing. 2. The method according to claim 1, and comprising defining the constraints as a composite constraint, wherein the respective costs of the states are determined by recursively combining the cost functions of the sub-constraints. 3. The method according to claim 2, wherein the sub-constraints comprise atomic constraints, which are composed of arithmetic expressions linked by comparison operators, and wherein assigning the cost functions comprises assigning respective atomic cost functions to the atomic constraints, and determining the cost functions of the sub-constraints from the atomic cost functions. 4. The method according to claim 1, wherein increasing the density of the solutions comprises eliminating a region of the problem topography that does not contain any of the solutions to the CSP. 5. The method according to claim 4, wherein the variables comprise bits, and wherein eliminating the region comprises identifying one or more of the bits that must have a specific value in order for the CSP to be satisfied, and setting the one or more of the bits to the specific value. 6. The method according to claim 1, wherein smoothing the gradient comprises eliminating one or more local extrema from the problem topography. 7. The method according to claim 1, wherein the constraints in the CSP comprise logical operators, which comprise at least one of a negation operator and implication operators, and wherein reformulating the constraints comprises eliminating from the constraints one or more of the negation and implication operators. 8. The method according to claim 1, wherein reformulating the constraints comprises identifying at least one of the variables that is aliased, such that the at least one of the variables can be expressed as a function of one or more others of the variables, and replacing the at least one of the variables in the constraints with an expression in terms of the one or more others of the variables. 9. The method according to claim 1, and comprising defining the constraints as a composite constraint, wherein reformulating the constraints comprises determining that at least one of the sub-constraints is tautological, and eliminating the at least one of the sub-constraints from the CSP. 10. The method according to claim 1, and comprising defining the constraints as a composite constraint, wherein reformulating the constraints comprises determining that two or more of the sub-constraints that are linked as operands of one of the logical operators are equivalent, and eliminating at least one of the two or more of the sub-constraints from the CSP. 11. The method according to claim 1, wherein verifying the design comprises revealing a bug in the hardware device. 
A robotics-control processor for performing real-time inverse kinematics and inverse dynamics calculations involving three-dimensional vectors. The processor employs a three-wide register and execution unit architecture, pipelined instructions, and register-to-register data processing to achieve rapid vector calculations. Broadcast buffers for exchanging operands between register files, and operand multiplexing at several levels within the processor allow program operation flexibility. In a preferred embodiment, the processor includes a CORDIC algorithm unit for rapid vector rotation and trigonometric function calculations.
Claims It is claimed: 1. A processor for receiving and executing a series of program instructions and data provided from a memory, for carrying out vector/vector and scalar/vector arithmetic operations, comprising: a. a data transfer input means for receiving the series of program instructions and data from memory; b. I, J, and K register files coupled to said data transfer input mans for receiving operands therefrom, each containing a plurality of registers for storing scalar values for the components of a plurality of three-dimensional vectors; c. I, J, and K execution units coupled to said I, J, and K register files for performing arithmetic operations on operands placed in the execution units; d. I, J, and K operand pathways connecting each I, J, and K register file, respectively, with the corresponding I, J, and K execution units, for transferring operands stored in selected register locations to the corresponding execution units, in response to data-fetch commands carried in the program instructions, each said I, J, and K operand pathways including a first and second data bus; e. first and second broadcast buffer connecting I and J operand pathways and J and K operand pathways, respectively, for passing operands between each pair of the operand pathways, in response to pathway exchange commands carried in the program instructions; f. data-return means coupled to said I, J, and K execution units and said I, J, and K register files for returning operands from the execution units to selected locations in the register files, in response to write-to-register commands in the program instructions; g. data-transfer output means having its inputs coupled to the outputs of said I, J and K execution units and further having its outputs coupled to the memory for passing selected operands from the processor to the memory, in response to write-to-memory commands carried in the program instructions; and, h. a program evaluation unit coupled to said I, J, and K register files and to said data transfer input means for passing commands in the program instructions to the register files, the execution units, the broadcast buffers, the data-return means, and the data-transfer input means and output means. 2. The processor of claim 1, wherein each of the I, J, and K execution units includes an arithmetic logic unit and a multiplication unit. 3. The processor of claim 2, wherein each operand pathway includes a first and second latch connecting said first and second bus, respectively, for storing operands sent from the I, J, and K register files, a third data bus connecting the first latch with a corresponding arithmetic logic unit and multiplication unit, and a fourth data bus connecting the second latch with the multiplication unit. 4. The processor of claim 3, which further includes, for each of the I, J, and K execution units, multiplexing means for directing either the operands stored in the second latch or a constant value from the program evaluation unit to the corresponding arithmetic logic unit, in response to commands in the program instructions. 5. The processor of claim 4, wherein said multiplexing means includes a third latch for staging the contents of said second latch and transferring the contents of said third latch to the memory. 6. The processor of claim 1, wherein the data return means includes a multiplexing means associated with each of the operand pathways in the processor for writing the results of the execution units into selected register files locations, said multiplexing means having its inputs coupled to the I, J and K executions units, said multiplexing means having its outputs coupled to the data return means. 7. The processor of claim 1, which further includes a CORDIC unit which implements two-dimensional coordinate rotations, using operands obtained from the three register files, and said shift-and-add unit includes latches for storing the output values of the algorithm operation, for use as operands in subsequent program instructions. 8. The processor of claim 1, wherein the program instructions are pipelines from the program evaluation unit in fetch-operand, execute, and store-result stages. 9. The processor of claim 8, wherein the processor clock speed in less than 100 nsec. 10. A process for processing a series of program instructions and data for carrying out vector/vector and scalar/vector arithmetic operations, comprising: a. a memory for storing the program instructions and data and for storing the results of arithmetic operations performed in accordance with the program instructions; b. a data transfer input means for receiving the series of program instructions and data from the memory; c. I, J, and K register files coupled to said data transfer input means of receiving operands therefrom, each containing a plurality of registers for storing scalar values for the components of a plurality of three-dimensional vectors; d. I, J, and K execution units coupled to said I, J, and K register files for performing arithmetic operations on operands placed in the execution units; e. I, J, and K operand pathways connecting each I, J, and K register file, respectively, with the corresponding I, J, and K execution units, for transferring operands stored in selected register locations to the corresponding execution units, in response to data-fetch commands carried in the program instructions, each said I, J, and K operand pathways including a first and second data bus; f. first and second broadcast buffers connecting I and J operand pathways and J and K operand pathways, respectively, for passing operands between each pair of the operand pathways, in response to pathway exchange commands carried in the program instructions; g. data-return means coupled to said I, J, and K execution units and said I, J, and K register files for returning operands from the execution units to selected locations in the register files, in response to wire-to-register commands in the program instructions; h. data-transfer output means having its inputs coupled to the outputs of said I, J and K execution units and further having its outputs coupled to the memory for passing selected operands from the processor to the memory, in response to write-to-memory commands carried in the program instructions; and, i. a program evaluation unit coupled to said I, J, and K register files and to said data transfer input means for passing commands in the program instructions to the register files, the execution units, the broadcast buffers, the data-return means, and the data-transfer input means and output means. 11. The processor of claim 10, wherein the memory includes a program memory for storing program instructions, and a data memory for storing operands needed for program execution. 12. The processor of claim 10, for use in a robotics control device for calculating kinematic and dynamic solutions needed to control robotic motion. 13. The processor of claim 12, wherein the calculations involve performing vector cross product, vector addition, scalar/vector multiplication, and scalar addition calculations. 14. The processor of claim 13, wherein the calculations further include vector rotation and trigonometric function calculations, and the processor further includes a CORDIC algorithm successive-add unit which implements two-dimensional coordinate rotations, using operands obtained from the three register files, and said successive-add unit includes latches for storing the output values of the algorithm operation for use in subsequent program instructions. 
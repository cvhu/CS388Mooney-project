Systems, methods and apparatus are provided through which in some embodiments, automata learning algorithms and techniques are implemented to generate a more complete set of scenarios for requirements based programming. More specifically, a CSP-based, syntax-oriented model construction, which requires the support of a theorem prover, is complemented by model extrapolation, via automata learning. This may support the systematic completion of the requirements, the nature of the requirement being partial, which provides focus on the most prominent scenarios. This may generalize requirement skeletons by extrapolation and may indicate by way of automatically generated traces where the requirement specification is too loose and additional information is required.
Claims We claim: 1. A computer-accessible medium having executable instructions to generate a system, the executable instructions capable of directing a processor to perform: generating at least one scenario that describes requirements of the system in reference to automata-learning resources, automata-learning resources being a system interface that maps functions and structures the learning process; and generating at least one implementation from the at least one scenario, such that the processor derives a system reflecting requirement specifications thereby reducing system development time. 2. The computer-accessible medium of claim 1, wherein the instructions includes instructions capable of directing a processor to perform: generating at least one scenario in a recursive heuristic manner, the at least one scenario describing requirements of the system to using automata-learning resources. 3. The computer-accessible medium of claim 1, wherein the instructions includes instructions capable of directing a processor to perform: pattern-matching the at least one scenario of the system to at least one process-based specification segment. 4. The computer-accessible medium of claim 3, wherein the instructions includes instructions capable of directing a processor to perform: pattern-matching the at least one scenario of the system to a formal specification using an inference engine, the inference engine iteratively applying a set of rules to a set of data representing a problem to determine a solution to the problem by logical manipulation and analysis of the data. 5. The computer-accessible medium of claim 4, the medium further comprising executable instructions capable of directing the processor to perform: analyzing the formal specification, whereby analyzing includes identifying at least one equivalent alternative process-based specification and characterizing differences between the process-based specification and the at least one alternative process-based specification, wherein differences include the number of process, deterministic behavior, and competition for resources. 6. The computer-accessible medium of claim 5, wherein the instructions includes instructions capable of directing a processor to perform: applying mathematical logic to the formal specification in order to identify a presence or absence of mathematical properties of the scenario, wherein mathematical logic operates through the instructions to reveal where prescribed mathematical properties exist in the formal specification of the scenario. 7. The computer-accessible medium of claim 6, the medium further comprising executable instructions capable of directing the processor to perform: correcting the absence of the mathematical properties if the mathematical properties are identified as absent in the scenario. 8. The computer-accessible medium of claim 7, wherein the mathematical properties of the formal specification include whether the formal specification implies a system execution trace that includes a deadlock condition, wherein a deadlock condition is a condition in which two executing processes each wait for the other to finish; whether the formal specification implies a system execution trace that includes a livelock condition, wherein a livelock condition is a condition in which two executing processes each wait for the other to finish, as their relative internal states change continually during execution without progress being made by either process; and whether the format specification implies a system execution trace that exhibits or does not exhibit a plurality of other behaviors, wherein a trace is a sequence of actions expressed as strings representing a history of an execution of a process. 9. The computer-accessible medium of claim 4, wherein the formal specification includes a process algebra, wherein the process algebra is a member of a diverse family of related approaches to formally modeling concurrent systems that provide a tool for the high-level description of interactions, communications, and synchronizations between a collection of independent agents or processes, along with algebraic laws that allow process descriptions to be manipulated and analyzed, and permit formal reasoning about equivalences between processes. 10. The computer-accessible medium of claim 9, wherein the process algebra includes: a language of Communicating Sequential Processes, wherein Communicating Sequential Processes is a formal language for describing patterns of interaction in concurrent systems. 11. The computer-accessible medium of claim 1, wherein the instructions include instructions capable of directing a processor to perform: translating the at least one scenario of the system to a script, wherein the system instructions automatically transform the learned models into logically equivalent scripts while preserving the full semantics, wherein the scripts have the properties of the learned models. 12. The computer-accessible medium of claim 11, wherein the instructions include instructions capable of directing a processor to perform: translating the at least one scenario of the system to a script, without the use of an automated inference engine. 13. The computer-accessible medium of claim 11, wherein the instructions further comprise instructions capable of directing a processor to perform: translating the at least one scenario of the system to a script using an inference engine. 14. The computer-accessible medium of claim 11, wherein the instructions include instructions capable of directing a processor to perform: translating the at least one scenario of the system to a formal specification using an inference engine; and translating the formal specification to the script. 15. The computer-accessible medium of claim 11, the medium further comprising executable instructions capable of directing the processor to perform: analyzing the formal specification, whereby analyzing includes identifying at least one equivalent alternative process-based specification and characterizing differences between the process-based specification and the at least one alternative process-based specification, wherein differences include the number of processes, deterministic behavior, and competition for resources. 16. The computer-accessible medium of claim 15, wherein the instructions include instructions capable of directing a processor to perform: applying mathematical logic to the format specification in order to identify a presence or absence of mathematical properties of the scenario, wherein mathematical logic operates through the instructions to reveal where prescribed mathematical properties exist in the formal specification of the scenario. 17. The computer-accessible medium of claim 16, the medium further comprising executable instructions capable of directing the processor to perform: correcting the absence of the mathematical properties if the mathematical properties are identified as absent in the scenario, wherein the learning process incorporates information about the absence of behavior in the constructed models. 18. The computer-accessible medium of claim 16, wherein the mathematical properties of the script include: whether the script implies a system execution trace that includes a deadlock condition, wherein a deadlock condition is a condition in which two executing processes each wait for the other to finish; whether the script implies a system execution trace that includes a livelock condition, wherein a livelock condition is a condition in which two executing processes each wait for the other to finish, as their relative internal states change continually during execution without progress being made by either process; and whether the script implies a system execution trace that exhibits or does not exhibit a plurality of other behaviors, wherein a trace is a sequence of actions expressed as strings representing a history of an execution of a process. 19. The computer-accessible medium of claim 11, wherein the script includes: a script encoded in PERL language. 20. The computer-accessible medium of claim 11, wherein the script includes: a script encoded in BIOPERL language. 21. The computer-accessible medium of claim 11, wherein the script includes: a script encoded in PYTHON language. 22. The computer-accessible medium of claim 11, wherein the script includes: a script encoded in awk language. 23. The computer-accessible medium of claim 11, the medium further comprising executable instructions capable of directing the processor to perform: translating the script to a formal model, wherein translating the script to a formal model includes using correctness preserving transformations of the scripts or an inference engine; and translating the formal model to at least one scenario, wherein the formal model is used to extract one or more scenarios by applying the Laws of Concurrency. 24. A computer-accessible medium having executable instructions to generate a system from scenarios, the executable instructions capable of directing a processor to perform: generating a plurality of substantially complete scenarios from a plurality of less than substantially complete scenarios using automata learning processes; pattern-matching the plurality of substantially complete scenarios to a formal specification, whereby pattern-matching includes checking for the presence of the constituents of a given pattern to test whether things have desired structure, to find relevant structure, to retrieve aligning parts, or to substitute a matching part; and translating the formal specification to a process-based specification implementing the system, such that the processor generates a system without knowledge of scenarios and without human intervention. 25. The computer-accessible medium of claim 24, wherein the instructions include instructions capable of directing a processor to perform: verifying the syntax of the scenarios; and mapping the plurality of substantially complete scenarios to a plurality of formal specification segments. 26. The computer-accessible medium of claim 24, wherein the instructions include instructions capable of directing a processor to perform: verifying consistency of the format specification. 27. The computer-accessible medium of claim 24, the medium further comprising executable instructions capable of directing the processor to perform: analyzing the formal specification, whereby analyzing includes identifying at least one equivalent alternative process-based specification and characterizing differences between the process-based specification and the at least one alternative process-based specification, wherein differences include the number of processes, deterministic behavior, and competition for resources. 28. The computer-accessible medium of claim 24, the medium further comprising executable instructions capable of directing the processor to perform: determining mathematical and logical properties of the format specification by an automated inference engine, wherein the inference engine iteratively applies a set of rules to a set of data representing a problem to determine a solution to the problem by logical manipulation and analysis of the data. 29. The computer-accessible medium of claim 24, wherein the instructions include instructions capable of directing a processor to perform: pattern-matching the plurality of substantially complete scenarios to a separate formal specification without the use of an automated inference engine, whereby pattern-matching includes checking for the presence of the constituents of a given pattern to test whether things have desired structure, to find relevant structure, to retrieve aligning parts or to substitute a matching part. 30. The computer-accessible medium of claim 24, wherein the format specification includes: a process algebra, wherein the process algebra is a member of a diverse family of related approaches to formally modeling concurrent systems that provide a tool for the high-level description of interactions, communications, and synchronizations between a collection of independent agents processes, along with algebraic laws that allow process descriptions to be manipulated and analyzed, and permit formal reasoning about equivalences between processes. 31. The computer-accessible medium of claim 30, wherein the process algebra includes: a language of Communicating Sequential Processes, wherein Communicating Sequential Processes is a formal language for describing patterns of interaction in concurrent systems. 32. A computer-accessible medium having executable instructions to validate a system, the executable instructions capable of directing a processor to perform: generating a plurality of substantially complete scenarios from a plurality of less than substantially complete scenarios using automata learning processes; and pattern-matching the scenarios to a formal model, whereby pattern-matching includes checking for the presence of the constituents of a given pattern to test whether things have desired structure, to find relevant structure, to retrieve aligning parts, or to substitute a matching part, such that the processor validates the system. 33. The computer-accessible medium of claim 32, the medium further comprising executable instructions capable of directing the processor to perform: analyzing the formal model. 34. The computer-accessible medium of claim 33, wherein the instructions include instructions capable of directing a processor to perform: applying mathematical logic to the formal model in order to identify a presence or absence of mathematical properties of the formal model. 35. The computer-accessible medium of claim 34, wherein the mathematical properties of the formal model include whether the formal model implies a system execution trace that includes a deadlock condition, wherein a deadlock condition is a condition in which two executing processes each wait for the other to finish; whether the formal model implies a system execution trace that includes a livelock condition, wherein a livelock condition is a condition in which two executing processes each wait for the other to finish, as their relative internal states change continually during execution without progress being made by either process; and whether the formal model implies a system execution trace that exhibits or does not exhibit a plurality of other behaviors, wherein a trace is a sequence of actions expressed as strings representing a history of an execution of a process. 36. The computer-accessible medium of claim 34, wherein the formal model includes: a process algebra, wherein the process algebra is a member of a diverse family of related approaches to formally modeling concurrent systems that provide a tool for the high-level description of interactions, communications, and synchronizations between a collection of independent agents or processes, along with algebraic laws that allow process descriptions to be manipulated and analyzed, and permit formal reasoning about equivalences between processes. 37. A method of generating a system from requirements using automata learning techniques, the method comprising: generating at least one scenario that describes requirements of the system; optionally generating at least one additional scenario using automata learning resources, automata-learning resources being a system interface that maps functions and structures the learning process; and generating at least one implementation from the at least one scenario by pattern matching with set comprehensions without a theorem prover, whereby pattern-matching includes checking for the presence of the constituents of a given pattern to test whether things have desired structure, to find relevant structure, to retrieve aligning parts, or to substitute a matching part. 38. The method of generating a system of claim 37, the method further comprising: pattern matching the at least one scenario to at least one process-based specification segment, whereby pattern-matching includes checking for the presence of the constituents of a given pattern to test whether things have desired structure, to find relevant structure, to retrieve aligning parts, or to substitute a matching part. 39. The method of generating a system of claim 37, the method further comprising: pattern matching the at least one scenario to a formal specification, in reference to an inference engine, whereby pattern-matching includes checking for the presence of the constituents of a given pattern to test whether things have desired structure, to find relevant structure, to retrieve aligning parts, or to substitute a matching part. 40. The method of generating a system of claim 39, the method further comprising: analyzing the formal specification for flaws, whereby analyzing includes identifying at least one equivalent alternative process-based specification and characterizing differences between the process-based specification and the at least one alternative process-based specification, wherein differences include the number of process, deterministic behavior, and competition for resources; and correcting any flaws in the formal specification. 41. The method of generating a system of claim 40, the method further comprising: translating the formal specification into a plurality of scripts; and generating a single script from the plurality of scripts. 42. The method of generating a system of claim 37, the method further comprising: mechanically translating domain knowledge into format specification segments, wherein domain knowledge is formalized according to standards for expressing, the standards for expressing including the standard for expressing independence of action, the standard for expressing precedence, the standard for expressing causality, the standard for expressing concurrency, and the standard for expressing similarity. 43. A method of generating a software system, the method comprising: generating at least one scenario using automata learning resources, automata-learning resources being a system interface that maps functions and structures the learning process; translating domain knowledge into a plurality of formal specification segments, wherein domain knowledge is formalized according to standards for expressing, the standards for expressing including the standard for expressing independence of action, the standard for expressing precedence, the standard for expressing causality, the standard for expressing concurrency, and the standard for expressing similarity; aggregating the formal specification segments into a single formal specification; translating the single formal specification into at least one script; and generating a single script from the at least one script. 44. The method of generating a software system of claim 43, wherein translating domain knowledge into a plurality of formal specification segments is accomplished without human intervention and includes: verifying the syntax of the at least one scenario; mapping the at least one scenario into a format specification; verifying the consistency of the format specification; and verifying a tack of other problems. 
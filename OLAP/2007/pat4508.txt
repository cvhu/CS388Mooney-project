A user of a virtual object or computer model uses a haptic interface device in the real world to manipulate a virtual tool in a virtual environment to interact and modify the virtual object. The user uses the virtual tool in a sculpting mode to modify the shape of the virtual object by adding, removing, or modifying the material of the object. The user feels an interaction force from the virtual tool as it interacts with and modifies the virtual object. The designer can set geometric constraints, such as a constraint point, constraint line, or constraint surface, to limit or guide the movement of the virtual tool.
Claims What is claimed is: 1. An apparatus for modifying a virtual object in a virtual environment, the apparatus comprising: a memory for storing code that defines a set of instructions; and a processor for executing the set of instructions to: (a) generate a virtual object in a virtual environment; (b) determine a position of a virtual tool in the virtual environment in response to a location of a user in real space, wherein the virtual tool comprises a plurality of discrete point locations for sensing penetration into the virtual object; and (c) reposition the virtual tool substantially tangent to a surface of the virtual object substantially at the start of a modification of the virtual object by the user. 2. The apparatus of claim 1, wherein the code comprises instructions to determine a vector extending from one of the discrete point locations of the virtual tool toward the surface of the virtual object, wherein the vector is approximately normal to the surface of the virtual object. 3. The apparatus of claim 2, wherein the discrete point location of the virtual tool from which the vector extends is selected from the plurality of discrete point locations of the virtual tool as the one at which there is greatest potential tool penetration. 4. The apparatus of claim 2, wherein the code comprises instructions to compute a surface location of the virtual object according to the vector. 5. The apparatus of claim 4, wherein the code comprises instructions to reposition the virtual tool such that the discrete point location of the virtual tool from which the vector extends is coincident with the computed surface location. 6. The apparatus of claim 1, wherein the discrete point locations of the virtual tool are spaced apart. 7. The apparatus of claim 6, wherein the discrete point locations of the virtual tool are spaced apart such that the virtual tool may become embedded in the virtual object even though none of the discrete point locations of the virtual tool penetrate the surface of the virtual object. 8. The apparatus of claim 1, wherein the virtual tool is spherical. 9. The apparatus of claim 1, wherein the virtual tool is spherical and wherein the code comprises instructions to: (i) determine a surface direction vector at a discrete point of the virtual object coincident with the surface of the virtual object; (ii) normalize the surface direction vector; (iii) compute a dot product between the normalized surface direction vector and a vector extending from the discrete point location to the origin of the virtual tool; (iv) determine a distance from the dot product indicating a length of the virtual tool that is not penetrating the surface of the virtual object; and (v) correct the position of the virtual tool according to the determined distance such that the virtual tool is tangent to the surface of the virtual object. 10. The apparatus of claim 1, wherein the code comprises instructions to determine a force feedback according to the position of the virtual tool in relation to the virtual object. 11. The apparatus of claim 10, wherein the code comprises instructions to send the force feedback to the user through a haptic interface device. 12. The apparatus of claim 1, wherein the virtual object is voxel-based. 13. A method for modifying a virtual object in a virtual environment, the method comprising the steps of: (a) generating a virtual object in a virtual environment; (b) determining a position of a virtual tool in the virtual environment in response to a location of a user in real space, wherein the virtual tool comprises a plurality of discrete point locations for sensing penetration into the virtual object; (c) repositioning the virtual tool substantially tangent to a surface of the virtual object substantially at the start of a modification of the virtual object by the user; and (d) displaying the virtual object and the virtual tool. 14. The method of claim 13, comprising the step of determining a vector extending from one of the discrete point locations of the virtual tool toward the surface of the virtual object, wherein the vector is approximately normal to the surface of the virtual object. 15. The method of claim 14, wherein the discrete point location of the virtual tool from which the vector extends is selected from the plurality of discrete point locations of the virtual tool as the one at which there is greatest potential tool penetration. 16. The method of claim 14, comprising the step of computing a surface location of the virtual object according to the vector. 17. The method of claim 16, wherein step (c) comprises repositioning the virtual tool such that the discrete point location of the virtual tool from which the vector extends is coincident with the computed surface location. 18. The method of claim 13, wherein the discrete point locations of the virtual tool are spaced apart. 19. The method of claim 18, wherein the discrete point locations of the virtual tool are spaced apart such that the virtual tool may become embedded in the virtual object even though none of the discrete point locations of the virtual tool penetrate the surface of the virtual object. 20. The method of claim 13, wherein the virtual tool is spherical. 21. The method of claim 20, comprising the steps of: (i) determining a surface direction vector at a discrete point of the virtual object coincident with the surface of the virtual object; (ii) normalizing the surface direction vector; (iii) computing a dot product between the normalized surface direction vector and a vector extending from the discrete point location to the origin of the virtual tool; (iv) determining a distance from the dot product indicating a length of the virtual tool that is not penetrating the surface of the virtual object; and (v) correcting the position of the virtual tool according to the determined distance such that the virtual tool is tangent to the surface of the virtual object. 22. The method of claim 21, further comprising the step of determining a force feedback according to the position of the virtual tool in relation to the virtual object. 23. The method of claim 22, further comprising the step of sending the force feedback to the user through a haptic interface device. 24. The method of claim 13, wherein the virtual object is voxel-based. 
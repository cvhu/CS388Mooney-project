A method for solving a constraint satisfaction problem includes receiving a set of variables having respective input domains and a set of relations among the variables, and building a network of one or more hyper-arcs representative of the set of relations, each hyper-arc corresponding to one of the relations and linking nodes in the network corresponding to the variables that are subject to the relation. For each of the hyper-arcs, the variables are assembled in a hierarchy based on the relation corresponding to the hyper-arc. The input domains of the variables in the hierarchy are reduced, so as to determine respective output domains of the variables that are consistent with the relations.
Claims The invention claimed is: 1. A computerized method for controlling operation of a target system, comprising: receiving a set of variables that are characteristic of inputs to the target system, the variables having respective input domains, and a set of constraints comprising one or more relations defined as a combination of operators and expressed in a generic relational language, the combination comprising at least one operator selected from a group of arithmetic and bitwise operators, which are applied to the variables; automatically parsing the constraints expressed in the generic relational language so as to build a network comprising one or more hyper-arcs, each hyper-are corresponding to a respective relation and comprising a constraint sub-network linking nodes in the network corresponding to the variables to which the operators are applied; processing each constraint sub-network so as to find sets of values of the variables within the input domains that satisfy the respective relation; reducing the input domains of the variables in the network using the sets of values of the variables, so as to determine respective output domains of the variables that are consistent with the set of constraints of the network; and determining values of the inputs to be made to the target system based on the consistent output domains of the variables. 2. A method according to claim 1, wherein reducing the input domains comprises finding projections of the operators onto the domains of the variables. 3. A method according to claim 2, wherein receiving the set of variables comprises receiving an output variable for each of the operators variable and at least one input variable for each of the operators, and wherein finding the projections comprises projecting the domain of the at least one input variable of each of the operators onto the domain of the output variable thereof, and projecting the domain of the output variable of each of the operators onto the domain of the at least one input variable thereof. 4. A method according to claim 2, wherein the operators comprise multi-variable operators, which receive two of more of the variables as their inputs. 5. A method according to claim 4, wherein the multi-variable operators comprise one or more operators selected from a group consisting of arithmetic addition, arithmetic subtraction, arithmetic multiplication, arithmetic division and modulo operators. 6. A method according to claim 4, wherein the multi-variable operators comprise one or more operators selected from a group consisting of an operator testing arithmetic equality of two of the variables, an operator testing arithmetic inequality of two of the variables, and an operator testing whether one of the variables is greater than another of the variables. 7. A method according to claim 4, wherein the multi-variable operators comprise one or more operators selected from a group consisting of a bitwise "and," bitwise "or" and bitwise "exclusive or" operations. 8. A method according to claim 1, wherein the combination of operators further comprises at least one logical operator. 9. A method according to claim 8, wherein the at least one logical operator comprises at least one of a disjunction operator, a negation operator, and an implication operator. 10. A method according to claim 1, wherein processing each constraint sub-network comprises, for each of the hyper-arcs, assembling the variables in a hierarchy based on the relation corresponding to the hyper-arc, and reducing the input domains of the variables in the hierarchy. 11. A method according to claim 10, wherein assembling the variables comprises arranging the variables in a hierarchical graph, having vertices corresponding to the variables. 12. A method according to claim 11, wherein arranging the variables in the hierarchical graph comprises arranging the graph so as to have the form of one or more trees. 13. A method according to claim 12, wherein processing each constraint sub-network comprises reducing the input domains over each of the trees so as to find respective interim domains of the variables that are consistent with the relation over each of the trees, and combining the interim domains over all of the trees to determine the output domains. 14. A method according to claim 11, wherein arranging the variables in the graph comprises inserting vertices in the graph corresponding to the operators, connecting the vertices corresponding to the variables. 15. A method according to claim 1, wherein automatically parsing the constraints comprises representing the set of relations as a disjunction of multiple relations, with one of the hyper-arcs corresponding respectively to each of the relations, and wherein reducing the input domains comprises determining interim domains of the variables for each of the hyper-arcs, and taking a union of the interim domains for each of the variables to determine the output domains. 16. A method according to claim 1, wherein processing each constraint sub-network comprises finding the sets of values of the variables within the input domains such that for any given value in the respective output domain of each of the variables, there exist values of the other variables in the respective output domains thereof that, together with the given value, constitute a solution to the set of relations. 17. A method according to claim 1, wherein processing each constraint sub-network comprises finding the sets of values of the variables within the input domains such that every set of values of the variables in the input domains that constitutes a solution to the set of relations is contained in the output domains of the variables. 18. A method according to claim 1, wherein the system comprises an electronic processor, and wherein determining the values of the inputs comprises determining commands and addresses to be input to the processor. 19. A method according to claim 1, wherein the system comprises a mechanical system, and wherein determining the values of the inputs comprises generating a command to control the system. 20. A method according to claim 1, wherein at least one of the constraints comprises a relation among at least three of the variables. 21. Apparatus for controlling operation of a target system, comprising a constraint processor, arranged to receive a set of variables that are characteristic of inputs to the target system, the variables having respective input domains, and a set of constraints comprising one or more relations defined as a combination of operators and expressed in a generic relational language, the combination comprising at least one operator selected from a group of arithmetic and bitwise operators, which are applied to the variables, wherein the constraint processor is arranged to automatically parse the constraints expressed in the generic relational language so as to build a network comprising one or more hyper-arcs, each hyper-arc corresponding to a respective relation and comprising a constraint sub-network linking nodes in the network corresponding to the variables to which the operators are applied, to process each constraint sub-network so as to find sets of values of the variables within the input domains that satisfy the respective relation, to reduce the input domains of the variables in the network using the sets of values of the variables, so as to determine respective output domains of the variables that are consistent with the set of constraints, and to determine values of the inputs to be made to the target system based on the consistent output domains of the variables. 22. Apparatus according to claim 21, wherein the processor is arranged to reduce the input domains by finding projections of the operators onto the domains of the variables. 23. Apparatus according to claim 22, wherein the set of variables comprises an output variable and at least one input variable for each of the operators, and wherein the processor is arranged to project the domain of the at least one input variable of each of the operators onto the domain of the output variable thereof, and to project the domain of the output variable of each of the operators onto the domain of the at least one input variable thereof. 24. Apparatus according to claim 21, wherein the operators comprise multi-variable operators, which receive two of more of the variables as their inputs. 25. Apparatus according to claim 24, wherein the multi-variable operators comprise one or more operators selected from the group consisting of arithmetic addition, arithmetic subtraction, arithmetic multiplication, arithmetic division and modulo operators. 26. Apparatus according to claim 24, wherein the multi-variable operators comprise one or more operators selected from the group consisting of an operator testing arithmetic equality of two of the variables, an operator testing arithmetic inequality of two of the variables, and an operator testing whether one of the variables is greater than another of the variables. 27. Apparatus according to claim 24, wherein the multi-variable operators comprise one or more operators selected from a group consisting of a bitwise "and," bitwise "or" and bitwise "exclusive or" operations. 28. Apparatus according to claim 21, wherein the combination of operators further comprises at least one logical operator. 29. Apparatus according to claim 28, wherein the at least one logical operator comprises at least one of a disjunction operator, a negation operator, and an implication operator. 30. Apparatus according to claim 21, wherein the processor is arranged, for each of the hyper-arcs, to assemble the variables in a hierarchy based on the relation corresponding to the hyper-arc, and to reduce the input domains of the variables in the hierarchy, so as to determine the respective output domains of the variables that are consistent with the set of constraints. 31. Apparatus according to claim 30, wherein the hierarchy of the variables comprises a hierarchical graph, having vertices corresponding to the variables. 32. Apparatus according to claim 31, wherein the hierarchical graph has the form of one or more trees. 33. Apparatus according to claim 32, wherein the processor is arranged to reduce the input domains over each of the trees so as to find respective interim domains of the variables that are consistent with the relation over each of the trees, and to combine the interim domains over all of the trees to determine the output domains. 34. Apparatus according to claim 31, wherein the graph comprises vertices corresponding to the operators, connecting the vertices corresponding to the variables. 35. Apparatus according to claim 21, wherein the set of constraints is represented as a disjunction of multiple relations, with one of the hyper-arcs corresponding respectively to each of the relations, and wherein the processor is arranged to determine interim domains of the variables for each of the hyper-arcs, and to take a union of the interim domains for each of the variables to determine the output domains. 36. Apparatus according to claim 21, wherein the processor is arranged to find the sets of values of the variables within the input domains such that for any given value in the respective output domain of each of the variables, there exist values of the other variables in the respective output domains thereof that, together with the given value, constitute a solution to the set of constraints. 37. Apparatus according to claim 21, wherein the processor is arranged to find the sets of values of the variables within the input domains such that every set of values of the variables in the input domains that constitutes a solution to the set of constraints is contained in the output domains of the variables. 38. Apparatus according to claim 21, wherein the set of constraints comprises a relation that relates to at least three of the variables. 39. Apparatus according to claim 21, wherein the system comprises an electronic device, and wherein the inputs comprise commands and addresses to be input to the device. 40. Apparatus according to claim 21, wherein the system comprises a mechanical system, and wherein the inputs comprise a command to control the system. 41. A computer software product for controlling operation of a target system, the product comprising a computer-readable medium in which program instructions are stored, which instructions, when read by a computer, cause the computer, upon receiving a set of variables that are characteristic of inputs to the target system, the variables having respective input domains, and a set of constraints comprising one or more relations defined as a combination of operators and expressed in a generic relational language, the combination comprising at least one operator selected from a group of arithmetic and bitwise operators, which are applied to the variables, to automatically parse the constraints expressed in the generic relational language so as to build a network comprising one or more hyper-arcs, each hyper-arc corresponding to a respective relation and comprising a constraint sub-network linking nodes in the network corresponding to the variables to which the operators are applied, to process each constraint sub-network so as to find sets of values of the variables within the input domains that satisfy the respective relation, to reduce the input domains of the variables in the network using the sets of values of the variables, so as to determine respective output domains of the variables that are consistent with the set of constraints, and to determine values of the inputs to be made to the target system based on the consistent output domains of the variables. 
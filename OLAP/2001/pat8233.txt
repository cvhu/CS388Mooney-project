A method and system for intelligent control of external devices using a mammalian brain-like structure having three parts. The method and system include a computer-implemented neural network system which is an extension of the model-based adaptive critic design and is applicable to real-time control (e.g., robotic control) and real-time distributed control. Additional uses include data visualization, data mining, and other tasks requiring complex analysis of inter-relationships between data.
Claims I claim: 1. A computer program product, comprising: a computer storage medium and a computer program code mechanism embedded in the computer storage medium for causing a computer to control an external device, the computer program code mechanism comprising: a first computer code device configured to initially establish a neural network including nodes, connections and connection weights; a second computer code device configured to train the neural network; and a third computer code device configured to use multi-level adaptive, dynamic programming to receive inputs and produce outputs based on the trained neural network, wherein each level, i, in the multi-level adaptive, dynamic programming, updates (1) a value function J.sup.(i), and (2) a transition matrix, M.sub.j, applicable to said level, wherein J.sup.(i) depends upon a corresponding value function J.sup.(i) and transition matrix M.sub.j of an adjacent level, wherein the transition matrix M.sub.i depends on the corresponding transition matrix M.sub.j, wherein increasing levels correspond to increasing periods of time, and wherein at least two levels are used, said outputs being calculated to maximize said value function J.sup.(i) and control said external device. 2. The computer program product as claimed in claim 1, wherein the third computer code device comprises a fourth computer code device configured to use clock-based multi-level adaptive, dynamic programming. 3. The computer program product as claimed in claim 2, wherein the fourth computer code device comprises a fifth computer code device configured to use a one-step update for each level, i. 4. The computer program product as claimed in claim 3, wherein the fifth computer code device comprises a sixth computer code device configured to calculate the value function J.sup.(i) at each level, i, according to J.sup.(i) =J.sup.(i-1) +M.sub.i-1 J.sup.(i-1). 5. The computer program product as claimed in claim 4, wherein at each increasing level M.sub.i corresponds to an increasing period of 2.sup.i. 6. The computer program product as claimed in claim 3, wherein at each increasing level M.sub.i corresponds to an increasing period of 2.sup.i. 7. The computer program product as claimed in claim 3, wherein the fifth computer code device comprises a sixth computer code device configured to calculate an adjacent level j according to j=i-1. 8. The computer program product as claimed in claim 3, wherein the fifth computer code device comprises a sixth computer code device configured to calculate an adjacent level j according to j=i+1. 9. The computer program product as claimed in claim 2, wherein the fourth computer code device comprises a fifth computer code device configured to use a k-step update for each level, i. 10. The computer program product as claimed in claim 9, wherein the fifth computer code device comprises a sixth computer code device configured to calculate the value function J.sub.n,k according to: wherein I is the identify function. 11. The computer program product as claimed in claim 2, wherein the fourth computer code device comprises a fifth computer code device configured to calculate a true value function J.sup..pi. according to: wherein U is a utility function and I is the identify function. 12. The computer program product as claimed in claim 1, wherein the third computer code device comprises a fourth computer code device configured to use event-based multi-level adaptive, dynamic programming. 13. A computer program product, comprising: a computer storage medium and a computer program code mechanism embedded in the computer storage medium for causing a computer to control an external device under neural-network control, the computer program code mechanism comprising: a first computer code device configured to initially establish an interconnection including nodes, connections and connection weights; a second computer code device configured to train the interconnection; and a third computer code device configured to use two-level adaptive, event-based, dynamic programming to receive inputs and produce outputs based on the trained interconnection, wherein the third computer code device comprises a fourth computer code device configured to use a first transition matrix, M.sup.A, representing transitions from within a block A of states of the external device, and a second transition matrix M.sup.AB, representing transitions from the block A to a different block B of states of the external device, and wherein the fourth computer code device comprises a fifth computer code device configured to use a policy, .pi., to calculated a value function J.sup..pi..vertline..sub.A for the block A from a utility function, U.sup..pi., according to: where n(A) is a set of blocks B such that there exists a direct transition from the block A to the block B and I is the identify function, said outputs being calculated to maximize said value function J.sup..pi..vertline..sub.A and control said external device. 14. The computer program product as claimed in claim 13, wherein the fifth computer code device comprises a sixth computer code device configured to use recurrence relations for J.sup.A and J.sup.AB according to: 15. The computer program product as claimed in claim 14, further comprising a seventh computer code device configured to perform policy updates locally. 16. The computer program product as claimed in claim 14, further comprising a seventh computer code device configured to perform policy updates globally. 17. The computer program product according to claim 13, wherein the third computer code device comprises a fourth computer code device configured to use fuzzy partitions with weight arrays .beta..sub.ij. 18. The computer program product according to claim 17, wherein the fourth computer code device comprises a fifth computer code device configured to set the weight arrays .beta..sub.ij equal to .mu.(j)/.mu.(i), where .mu.(j) and .mu.(i) represent degrees of membership of given states i and j, respectively, in a given decision block. 
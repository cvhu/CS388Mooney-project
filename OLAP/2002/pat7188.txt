In a computer implemented learning and/or process control system, a computer model is constituted by the most currently fit entity in a population of computer program entities. The computer model defines fitness as a function of inputs and outputs. A computing unit accesses the model with a set of inputs, and determines a set of outputs for which the fitness is highest. This associates a sensory-motor (input-output) state with a fitness in a manner that might be termed "feeling". The learning and/or control system preferably utilizes a Compiling Genetic Programming System (CGPS) in which one or more machine code entities such as functions are created which represent solutions to a problem and are directly executable by a computer. The programs are created and altered by a program in a higher level language such as "C" which is not directly executable, but requires translation into executable machine code through compilation, interpretation, translation, etc. The entities are initially created as an integer array that can be altered by the program as data, and are executed by the program by recasting a pointer to the array as a function type. The entities are evaluated by executing them with training data as inputs, and calculating fitnesses based on a predetermined criterion. The entities are then altered based on their fitnesses using a genetic machine learning algorithm by recasting the pointer to the array as a data (e.g. integer) type. This process is iteratively repeated until an end criterion is reached.
Claims We claim: 1. A computer implemented method, comprising the steps of: (a) providing a computer model which defines a relationship between inputs, outputs, and corresponding fitnesses; (b) accessing the computer model to determine, in response to an applied input, an output for which a corresponding fitness meets a predetermined criterion; and (c) applying the output determined by the computing unit to control a real-time process. 2. A method as in claim 1, in which step (a) comprises configuring the computer model such that at least one applied input represents a parameter relating to the real-time process. 3. A method as in claim 1, in which step (a) comprises configuring the computer model to define fitness as including a "pain" component and a "pleasure" component. 4. A method as in claim 1, further comprising the steps of: (d) providing a learning unit; and (e) controlling the learning unit to derive the computer model using a learning algorithm. 5. A method as in claim 4, in which step (d) comprises configuring the learning unit to derive the computer model using regression. 6. A method as in claim 4, in which step (d) comprises configuring the learning unit to derive the computer model using regression. 7. A method as in claim 4, in which step (d) comprises configuring the learning unit to derive the computer model using a matching learning system. 8. A method as in claim 4, in which step (d) comprises configuring the learning unit to derive the computer model using a compiling genetic programming system. 9. A method as in claim 4, in which step (d) comprises configuring the learning unit to derive the computer model using a fitting algorithm applied to training data. 10. A method as in claim 4, in which steps (b) and (d) in combination comprise controlling the computing unit and the learning unit operate independently and interact intermittently. 11. A method as in claim 4, which step (e) comprises controlling the learning unit to derive the computer model by altering a single entity. 12. A method as in claim 4, in which step (e) comprises controlling the learning unit to derive the computer model by altering a plurality of a population of entities. 13. A method as in claim 4, in which step (e) comprises controlling the learning unit to derive different computer models at different times. 14. A method as in claim 4, in which: step (d) comprises configuring the learning unit to store a plurality of vectors, each of which includes an input, an output, and a corresponding fitness; step (d) further comprises configuring the learning unit to comprise a derivation unit; and step (e) comprises controlling the derivation unit to derive the computer model using the vectors as a training set. 15. A method as in claim 14, in which: the fitness in at least one of the vectors is an empirical fitness; and the fitness defined by computer model is a predicted fitness. 16. A method as in claim 14, in which step (d) comprises configuring the learning unit to prevent at least one of the vectors stored in memory from being removed. 17. A method as in claim 14, in which step (d) comprises configuring the learning unit to temporarily prevent at least one of the vectors stored in memory from being removed according to a predetermined criterion. 18. A method as in claim 14, in which step (d) comprises configuring the learning unit to make at least one of the vectors stored in memory more difficult to remove than at least one other vector stored in memory. 19. A method as in claim 1, further comprising the steps of: (d) providing an autonomous agent; and (e) applying said output to control the autonomous agent. 20. A method as in claim 19, in which said fitness includes a "pain" component and a "pleasure" component. 21. A method as in claim 20, in which: the "pain" component increases as the behavior of the autonomous agent becomes less desirable; and the "pleasure" component increases as the behavior of the autonomous agent becomes more desirable. 22. A method as in claim 19, in which step (d) comprises configuring the autonomous agent to comprise a robot. 
A system for parallel asynchronous command execution is provided. The system includes a first computer system for directing a plurality of calls to at least one other computer system. The first computer system invokes a remote procedure in the other computer system and receives results from the procedure via an event triggered by the other computer system. The system may also include a distributed object architecture for communicating between the first computer system and the other computer system.
Claims What is claimed is: 1. A system for parallel asynchronous command execution, comprising: a processor; system memory; and a first computer system for directing one or more calls to invoke a plurality of remote procedures that are to be concurrently processed in parallel in a second computer system, the first computer and second computer communicating via a non-persistent connection, such that the remote procedures are executed without persistent handshaking between the first computer system and the second computer system, and wherein the first computer system, upon completion of at least one of the plurality of remote procedures, receives an event trigger generated by and transmitted from the second computer system, wherein the event trigger includes the remote procedure results for at least one of the plurality of remote procedures. 2. The system of claim 1 further comprising a distributed object architecture for communicating between the first computer system and the second computer system. 3. The system of claim 2 wherein the distributed object architecture is implemented via at least one of component object model (COM), distributed component object model (DCOM), and common object request broker architecture (CORBA) interface languages. 4. The system of claim 1 wherein the first computer system configures an event to receive the remote procedure results from the second computer system. 5. The system of claim 4 wherein the event is a Windows Management Infrastructure event. 6. The system of claim 4 wherein the event is provided with an identifier for enabling the second computer system to notify the first computer system. 7. The system of claim 1 further comprising a work item and a thread for processing the remote procedure. 8. The system of claim 1 further comprising a completion event on the second computer system for notifying the first computer system. 9. The system of claim 1 further comprising an object interface for providing remote access between the first computer system and the second computer system. 10. The system of claim 9 wherein the object interface further includes an identification for a remote object. 11. The system of claim 9 wherein the object interface further includes a computer name for identifying where to trigger an event. 12. The system of claim 9 wherein the object interface further includes an identification for an event for the second computer system to trigger. 13. The system of claim 9 wherein the object interface further includes an input argument for providing results from the remote procedure. 14. The system of claim 9 wherein the object interface further includes at least one of a username, domain, and password for specifying a user context for the remote procedure. 15. The system of claim 1 wherein the second computer system further comprises a work interface for executing the remote procedure. 16. The system of claim 15 wherein the work interface further comprises an input argument and an output argument. 17. A system for parallel asynchronous command execution, comprising: a processor; system memory; a first computer system for performing the following: directing one or more calls to invoke a plurality of remote procedures that are to be concurrently processed in parallel in at least one other computer system; upon completion of at least one of the plurality of remote procedures, receives an indication indicating that a non-persistent connection is to be established between the first computer system and the at least one other computer system; determines that the connection between the first computer system and the at least one other computer system was disrupted after sending the one or more calls to the at least one other computer system; and receives an event trigger generated by and transmitted from the at least one other computer system, wherein the event trigger includes the remote procedure results for at least one of the plurality of remote procedures. 18. A method for parallel asynchronous command execution, comprising the steps of: directing at least one call from a first computer system to invoke a plurality of remote procedures that are to be concurrently processed in parallel in at least one other computer system, such that the remote procedures are executed without persistent handshaking between the first computer system and the second computer system; establishing a non-persistent connection between the first computer system and the at least one other computer system upon completion of the remote procedure; and generating an event trigger and transmitting the event trigger to the first computer system, wherein the event trigger includes the remote procedure results for at least one of the plurality of remote procedures. 19. The method of claim 18 further comprising the step of communicating between the first computer system and the at least one other computer system via a distributed object architecture. 20. The method of claim 19 wherein the distributed object architecture is implemented via at least one of COM, DCOM, and CORBA interface languages. 
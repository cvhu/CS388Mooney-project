Described herein is a method that produces fully (mathematically) tractable development of policies for autonomic systems from requirements through to code generation. This method is illustrated through an example showing how user formulated policies can be translated into a formal mode which can then be converted to code. The requirements-based programming method described provides faster, higher quality development and maintenance of autonomic systems based on user formulation of policies. Further, the systems, methods and apparatus described herein provide a way of analyzing policies for autonomic systems and facilities the generation of provably correct implementations automatically, which in turn provides reduced development time, reduced testing requirements, guarantees of correctness of the implementation with respect to the policies specified at the outset, and provides a higher degree of confidence that the policies are both complete and reasonable. The ability to specify the policy for the management of a system and then automatically generate an equivalent implementation greatly improves the quality of software, the survivability of future missions, in particular when the system will operate untended in very remote environments, and greatly reduces development lead times and costs.
Claims We claim: 1. A computer-accessible medium having executable instructions to generate a system, the executable instructions capable of directing a processor to perform: receiving at least one policy of the system; translating the at least one policy of the system to an implementation, and analyzing the formal specification, wherein a policy includes a set of rules or principles that describes constraints on system functionality and prescribes how the system must behave; wherein translating the at least one policy of the system includes mapping a policy to a specific, single implementation as determined by the syntax and semantics of a policy language, an underlying formal model, and domain knowledge; wherein an implementation is a set of artifacts that provides a functional instance of the system; and wherein analyzing the formal specification includes interpreting and applying mathematical logic to the formal specification to identify inconsistencies, omissions, redundancies, and errors, including system deadlock, system livelock, and unreachable states, wherein applying mathematical logic includes applying axioms and theorems of mathematics and logic, wherein system deadlock is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein system livelock is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 2. The computer-accessible medium of claim 1, wherein the executable instructions further comprise translating the at least one policy of the system to the implementation without using an automated inference engine. 3. The computer-accessible medium of claim 1, wherein the executable instructions further comprise translating the at least one policy of the system to the implementation in reference to an inference engine, wherein an inference engine iteratively applies a set of rules to a set of data representing a problem to determine a solution to the problem by logical manipulation and logical analysis of the data. 4. The computer-accessible medium of claim 1, wherein the executable instructions further comprise translating the at least one policy of the system to a formal specification in reference to an inference engine, wherein translating the at least one policy of the system to a formal specification includes interpreting the syntax and semantics of the policy and matching the syntactically or logically equivalent representations in the formal specification language, and wherein an inference engine iteratively applies a set of rules to a set of data representing a problem to determine a solution to the problem by logical manipulation and logical analysis of the data; and translating the formal specification to an implementation, wherein translating the formal specification to an implementation includes interpreting the syntax and semantics of the formal specification and matching the syntactically or logically equivalent representations in the implementation language. 5. The computer-accessible medium of claim 4, wherein the executable instructions further comprise applying mathematical logic to the formal specification in order to identify a presence or absence of mathematical properties of the at least one policy. 6. The computer-accessible medium of claim 4, the medium further comprising: executable instructions capable of directing the processor to perform translating the formal specification to at least one policy, wherein translating the formal specification to at least one policy includes interpreting syntax and semantics of the formal specification and matching the syntactically or logically equivalent representation in the at least one policy. 7. The computer-accessible medium of claim 5, the medium further comprising: executable instructions capable of directing the processor to perform correcting the absence of the mathematical properties in the policy, if the mathematical properties are identified as absent in the policy, wherein correcting includes detecting inconsistencies or other errors in the formal specification and, if possible, identifying a portion of the at least one policy lacking in the detected inconsistencies or other errors and designating the portion as a corrected policy. 8. The computer-accessible medium of claim 5, wherein the mathematical properties of the at least one policy further comprise whether the formal specification implies a system execution trace that includes a deadlock condition; whether the formal specification implies a system execution trace that includes a livelock condition; and whether the formal specification implies a system execution trace that exhibits or does not exhibit a plurality of other desirable or undesirable behaviors, including safety properties, security properties, unreachable states, inconsistencies, naming conflicts, unused variables, unexecuted code, wherein a deadlock condition is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein a livelock condition is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 9. The computer-accessible medium of claim 1, wherein the implementation further comprises: a script encoded in PERL language. 10. The computer-accessible medium of claim 1, wherein the implementation further comprises: a script encoded in BIOPERL language. 11. The computer-accessible medium of claim 1, wherein the implementation further comprises: a script encoded in PYTHON language. 12. The computer-accessible medium of claim 1, wherein the implementation further comprises: a script encoded in AWK language. 13. A computer-accessible medium having executable instructions to generate a system from at least one policy, the executable instructions capable of directing a processor to perform: translating the at least one policy to a formal specification; translating the formal specification to one or more scripts implementing the system, and analyzing the formal specification, wherein a policy includes a set of rules or principles that describes constraints on system functionality and prescribes how the system must behave; wherein translating the at least one policy to a formal specification includes interpreting syntax and semantics in the policy and matching the syntactically or logically equivalent representations in the formal specification language; wherein translating the formal specification to one or more scripts implementing the system includes interpreting the expressions composing the formal specification and matching syntactically or logically equivalent representations in the implementation scripting language; and wherein analyzing the formal specification includes interpreting and applying mathematical logic to a formal specification to identify inconsistencies, omissions, redundancies, and errors, including system deadlock, system livelock, and unreachable states, wherein applying mathematical logic includes applying axioms and theorems of mathematics and logic, wherein system deadlock is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein system livelock is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 14. The computer-accessible medium of claim 13, wherein the executable instructions further comprise: verifying the syntax of the at least one policy; and mapping the at least one policy to a plurality of formal specification segments, wherein verifying the syntax includes interpreting and logically analyzing syntax and semantics in the policy to detect and identify violation of predetermined syntax rules and conventions; and wherein mapping includes assigning to the policy a plurality of formal specification segments by using a set of predetermined correspondences. 15. The computer-accessible medium of claim 13, wherein the executable instructions further comprise verifying consistency of the formal specification, wherein verifying consistency includes applying logic, mathematical laws, and domain knowledge encoded in the system to detect and identify logical and mathematical inconsistencies in the formal specification. 16. The computer-accessible medium of claim 13, the medium further comprising executable instructions capable of directing the processor to perform: determining mathematical and logical properties of the formal specification by an automated inference engine, wherein an inference engine iteratively applies a set of rules to a set of data representing a problem to determine a solution to the problem by logical manipulation and logical analysis of the data. 17. The computer-accessible medium of claim 13, wherein the executable instructions further comprise: translating the at least one policy to a separate formal specification without using an automated inference engine, wherein translating the at least one policy of the system to a formal specification includes interpreting the syntax and semantics of the policy and matching the syntactically or logically equivalent representation in the formal specification language, and wherein an inference engine iteratively applies a set of rules to a set of data representing a problem to determine a solution to the problem by logical manipulation and logical analysis of the data. 18. The computer-accessible medium of claim 13, wherein the script further comprises: a script encoded in PERL language. 19. The computer-accessible medium of claim 13, wherein the script further comprises: a script encoded in AWK language. 20. The computer-accessible medium of claim 13, wherein the script further comprises: a script encoded in PYTHON language. 21. A system to validate a software system, the system comprising: an inference engine, wherein an inference engine iteratively applies a set of rules to a set of data representing a problem to determine a solution to the problem by logical manipulation and logical analysis of the data; a translator, operable to receive at least one policy of the software system and to generate in reference to the inference engine a specification encoded in a formal specification language, wherein a policy includes a set of rules or principles that describes constraints on system functionality and prescribes how the system must behave; and an analyzer operable to perform model verification/checking and determine existence of omissions, deadlock, livelock, and race conditions or other problems and inconsistencies in the formal specification, wherein a deadlock condition is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, wherein a livelock condition is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process, and wherein race condition is when progress of at least two separate processes is each dependent upon the state of another part of the system in such way that a first process can alter that state before the second process alters the state. 22. The system of claim 21, wherein the translation of the at least one policy into a specification is carried out without human intervention. 23. A computer-accessible medium having executable instructions to validate a system, the executable instructions capable of directing a processor to perform: receiving at least one policy of the system, wherein a policy includes a set of rules or principles that describes constraints on system functionality and prescribes how the system must behave; translating the at least one policy of the system to a formal specification, wherein translating the at least one policy of the system to a formal specification includes interpreting the syntax and semantics of the policy and matching the syntactically or logically equivalent representation in the formal specification language, and wherein an inference engine iteratively applies a set of rules to a set of data representing a problem to determine a solution to the problem by logical manipulation and logical analysis of the data; translating the formal specification to an implementation, wherein translating the formal specification to an implementation includes interpreting the sequence of the syntax and semantics of a formal specification language and matching the syntactically or logically equivalent representations in the implementation language and wherein an implementation is a set of artifacts that provides a functional instance of the system; and analyzing the formal specification, wherein analyzing the formal specification includes interpreting and applying mathematical logic to a formal specification to identify inconsistencies, omissions, redundancies, and errors, including system deadlock, system livelock, and unreachable states, wherein applying mathematical logic includes applying axioms and theorems of mathematics and logic, wherein system deadlock is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein system livelock is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 24. The computer-accessible medium of claim 23, wherein the executable instructions further comprise: translating the at least one policy of the system to the formal specification, without the use of an automated inference engine, wherein an inference engine iteratively applies a set of rules to a set of data representing a problem to determine a solution to the problem by logical manipulation and logical analysis of the data. 25. The computer-accessible medium of claim 23, wherein the executable instructions further comprise: translating the at least one policy of the system to the formal specification, in reference to an inference engine, wherein an inference engine iteratively applies a set of rules to a set of data representing a problem to determine a solution to the problem by logical manipulation and logical analysis of the data. 26. The computer-accessible medium of claim 23, wherein the executable instructions further comprise applying mathematical logic to the formal specification in order to identify a presence or absence of mathematical properties of the at least one policy. 27. The computer-accessible medium of claim 26, wherein the mathematical properties of the formal specification further comprise: whether the formal specification implies a system execution trace that includes a deadlock condition; whether the formal specification implies a system execution trace that includes a livelock condition; and whether the formal specification implies a system execution trace that exhibits or does not exhibit a plurality of other desirable or undesirable behaviors, including safety properties, security properties, unreachable states, inconsistencies, naming conflicts, unused variables, and unexecuted code, wherein a deadlock condition is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein a livelock condition is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 28. The computer-accessible medium of claim 23, wherein the implementation further comprises: a script encoded in PERL language. 29. The computer-accessible medium of claim 23, wherein the implementation further comprises: a script encoded in BIOPERL language. 30. The computer-accessible medium of claim 23, wherein the implementation further comprises: a script encoded in PYTHON language. 31. The computer-accessible medium of claim 23, wherein the implementation further comprises: a script encoded in AWK language. 32. The computer-accessible medium of claim 23, the medium further comprising: executable instructions capable of directing the processor to perform translating the implementation to a formal specification, wherein translating the implementation to a formal specification includes interpreting an implementation language and matching the syntactically or logically equivalent representations of the formal specification; and translating the formal specification to at least one policy, wherein translating the formal specification to at least one policy includes interpreting syntax and semantics of the formal specification and matching the syntactically or logically equivalent representations in the at least one policy. 33. A computer-accessible medium having executable instructions to validate a system, the executable instructions capable of directing a processor to perform: receiving a formal specification of the system; translating the formal specification to an implementation, wherein translating the formal specification to an implementation includes interpreting the syntax and semantics of a formal specification language and matching the syntactically or logically equivalent representations in the implementation language and wherein an implementation is a set of software that provides a functional instance of the system; and analyzing the formal specification, wherein analyzing the formal specification includes interpreting and applying mathematical logic to a formal specification to identify inconsistencies, omissions, redundancies, and errors, including system deadlock, system livelock, and unreachable states, wherein applying mathematical logic includes applying axioms and theorems of mathematics and logic, wherein system deadlock is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein system livelock is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 34. The computer-accessible medium of claim 33, wherein the executable instructions further comprise applying mathematical logic to the formal specification in order to identify a presence or absence of mathematical properties of the implementation. 35. The computer-accessible medium of claim 34, wherein the mathematical properties of the formal specification further comprise: whether the formal specification implies a system execution trace that includes a deadlock condition; whether the formal specification implies a system execution trace that includes a livelock condition; and whether the formal specification implies a system execution trace that exhibits or does not exhibit a plurality of other desirable or undesirable behaviors including safety properties, security properties, unreachable states, inconsistencies, naming conflicts, unused variables, unexecuted code, wherein a deadlock condition is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein a livelock condition is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 36. The computer-accessible medium of claim 33, the medium further comprising executable instructions capable of directing the processor to perform translating the formal specification to at least one policy, wherein translating the formal specification to at least one policy includes interpreting syntax and semantics of the formal specification and matching the syntactically or logically equivalent representations in the at least one policy. 37. The computer-accessible medium of claim 33, wherein the implementation further comprises: a script encoded in PERL language. 38. The computer-accessible medium of claim 33, wherein the implementation further comprises: a script encoded in BIOPERL language. 39. The computer-accessible medium of claim 33, wherein the implementation further comprises: a script encoded in PYTHON language. 40. The computer-accessible medium of claim 33, wherein the implementation further comprises: a script encoded in AWK language. 41. A computer-accessible medium having executable instructions to validate a system, the executable instructions capable of directing a processor to perform receiving an implementation of the system, wherein an implementation is a set of artifacts that provides a functional instance of the system; translating the implementation to a formal specification, wherein translating the implementation to a formal specification includes interpreting an implementation language and matching the syntactically or logically equivalent representations of the format specification; and analyzing the formal specification, wherein analyzing the formal specification includes interpreting and applying mathematical logic to a formal specification to identify inconsistencies, omissions, redundancies, and errors, including system deadlock, system livelock, and unreachable states, wherein applying mathematical logic includes applying axioms and theorems of mathematics and logic, wherein system deadlock is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein system livelock is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 42. The computer-accessible medium of claim 41, wherein the executable instructions further comprise applying mathematical logic to the formal specification in order to identify a presence or absence of mathematical properties of the specification. 43. The computer-accessible medium of claim 42, wherein the mathematical properties of the formal specification further comprise: whether the formal specification implies a system execution trace that includes a deadlock condition; whether the formal specification implies a system execution trace that includes a livelock condition; and whether the formal specification implies a system execution trace that exhibits or does not exhibit a plurality of other desirable or undesirable behaviors including safety properties, security properties, unreachable states, inconsistencies, naming conflicts, unused variables, unexecuted code, wherein a deadlock condition is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein a livelock condition is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 44. The computer-accessible medium of claim 41, wherein the implementation further comprises: a script encoded in PERL language. 45. The computer-accessible medium of claim 41, wherein the implementation further comprises: a script encoded in BIOPERL language. 46. The computer-accessible medium of claim 41, wherein the implementation further comprises: a script encoded in PYTHON language. 47. The computer-accessible medium of claim 41, wherein the implementation further comprises: a script encoded in AWK language. 48. A computer-accessible medium having executable instructions to validate a system, the executable instructions capable of directing a processor to perform: receiving a formal specification of the system; translating the formal specification to at least one policy, wherein translating the formal specification to at least one policy includes interpreting syntax and semantics of the formal specification and matching the syntactically or logically equivalent representations in the at least one policy and wherein a policy includes a set of rules or principles that describes constraints on system functionality and prescribes how the system must behave; and analyzing the formal specification, wherein analyzing the formal specification includes interpreting and applying mathematical logic to a formal specification to identify inconsistencies, omissions, redundancies, and errors, including system deadlock, system livelock, and unreachable states, wherein applying mathematical logic includes applying axioms and theorems of mathematics and logic, wherein system deadlock is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein system livelock is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 49. The computer-accessible medium of claim 48, wherein the executable instructions further comprise applying mathematical logic to the formal specification in order to identify a presence or absence of mathematical properties of the formal specification. 50. The computer-accessible medium of claim 49, wherein the mathematical properties of the formal specification further comprise: whether the formal specification implies a system execution trace that includes a deadlock condition; whether the formal specification implies a system execution trace that includes a livelock condition; and whether the formal specification implies a system execution trace that exhibits or does not exhibit a plurality of other desirable or undesirable behaviors including safety properties, security properties, unreachable states, inconsistencies, naming conflicts, unused variables, unexecuted code, wherein a deadlock condition is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein a livelock condition is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 51. A computer-accessible medium having executable instructions to validate a system, the executable instructions capable of directing a processor to perform: translating a plurality of policies to a plurality of formal specifications; combining the plurality of formal specifications to a singular formal specification, wherein combining the plurality of formal specifications to a singular formal specification includes using mathematical logic to produce a single logical equivalent of the plurality of formal specifications in a sequence of formal-specification-language expressions from another sequence of formal-specification-language expressions, and wherein a policy includes a set of rules or principles that describes constraints on system functionality and prescribes how the system must behave; analyzing the singular formal specification, wherein analyzing the formal specification includes interpreting and applying mathematical logic to a formal specification to identify inconsistencies, omissions, redundancies, and errors, including system deadlock, system livelock, and unreachable states, wherein applying mathematical logic includes applying axioms and theorems of mathematics and logic, wherein system deadlock is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein system livelock is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process; correcting absence of the mathematical properties in the singular formal specification, wherein correcting includes detecting inconsistencies or other errors in the formal specification and replacing the inconsistencies or errors with the correct property or properties; and translating the formal specification to a policy, wherein translating the formal specification to a policy includes interpreting syntax and semantics of the formal specification and matching the syntactically or logically equivalent representations in the policy. 52. The computer-accessible medium of claim 51, wherein the executable instructions further comprise applying mathematical logic to the singular formal specification in order to identify a presence or absence of mathematical properties of the singular formal specification. 53. The computer-accessible medium of claim 52, wherein the mathematical properties of the singular formal specification further comprise: whether the singular formal specification implies a system execution trace that includes a deadlock condition; whether the singular formal specification implies a system execution trace that includes a livelock condition; and whether the singular formal specification implies a system execution trace that exhibits or does not exhibit a plurality of other desirable or undesirable behaviors, wherein a deadlock condition is when at least two executing processes each wait for the other to finish and may continue to do so indefinitely, and wherein a livelock condition is when at least two executing processes each wait for the other to finish, but their relative internal states change continually during execution without progress being made by either process. 54. The computer-accessible medium of claim 53, wherein the desirable or undesirable behaviors is taken from the list consisting essentially of safety properties, security properties, unreachable states, inconsistencies, running conflicts, unused variables, and unexecuted code. 
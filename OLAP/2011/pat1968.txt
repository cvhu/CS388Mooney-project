The present invention outlines a novel approach to utilizing the results of genomic sequence information by computer-directed polynucleotide assembly based upon information available in databases such as the human genome database. Specifically, the present invention may be used to select, synthesize and assemble a novel, synthetic target polynucleotide sequence encoding a target polypeptide. The target polynucleotide may encode a target polypeptide that exhibits enhanced or altered biological activity as compared to a model polypeptide encoded by a natural (wild-type) or model polynucleotide sequence.
Claims What is claimed is: 1. A computer program, stored on a computer-readable storage medium, for generating a target polynucleotide sequence, the computer program comprising instructions for causing a computer system to: a) identify an initiating polynucleotide sequence contained in the target polynucleotide sequence; b) parse the target polynucleotide sequence into multiply distinct, partially complementary, oligonucleotides by an algorithm comprising: TABLE-US-00014 $Overlap = <STDIN>; $seqlen = length($sequence); } $revcomp = ""; for ($i = $seqlen-1; $i >= 0; $i--) { $base = substr($sequence,$i,1); if ($base eq "a"){$comp = "T";} elsif ($base eq "t"){$comp = "A";} elsif ($base eq "g"){$comp = "C";} elsif ($base eq "c"){$comp = "G";} elsif ($base eq "A"){$comp = "T";} elsif ($base eq "T"){$comp = "A";} elsif ($base eq "G"){$comp = "C";} elsif ($base eq "C"){$comp = "G";} else {$comp = "X"}; $revcomp = $revcomp.$comp; } print OUT "Forward oligos\n"; print "Forward oligos\n"; $r = 1; for ($i = 0; $i <= $seqlen -1; $i+=$OL) { $oligo = substr($sequence,$i,$OL); print OUT "$oligname F- $r $oligo\n"; print "$oligname F- $r $oligo\n"; $r = $r + 1; } $r = 1; for ($i = $seqlen - $Overlap - $OL; $i >= 0; $i-=$OL) { print OUT "\n"; print "\n"; $oligo = substr($revcomp,$i,$OL); print OUT "$oligname R- $r $oligo"; print "$oligname R- $r $oligo"; $r = $r + 1; } $oligo = substr($revcomp,1,$Overlap); print OUT "$oligo\n"; print "$oligo\n"; wherein $oligoname is an identifier name for a list and for each component #oligonucleotide; $OL is a length of each component oligonucleotide; $Overlap is a length of an overlap in bases between each forward and each #reverse oligonucleotide; $sequence is a DNA sequence in bases; $seqlen is a length of the DNA sequence in bases; $bas is an individual base in a sequence; $forseq is a sequence of a forward oligonucleotide; $revseq is a sequence of a reverse oligonucleotide; $revcomp is a reverse complemented sequence of a gene; $oligonameF-[ ] is a list of parsed forward oligos; and $oligonameR-[ ] is a list of parsed reverse oligos; c) output the sequence of the multiply distinct, partially complementary, oligonucleotides to an oligonucleotide synthesizer; and d) control assembly of the target polynucleotide sequence by controlling the bi-directional extension of the initiating polynucleotide sequence by the sequential addition on an automated work station of the partially complementary oligonucleotides synthesized on the oligonucleotide synthesizer resulting in production of a contiguous-double-stranded polynucleotide from the partially complementary oligonucleotide, wherein the target polynucleotide sequence is a known or previously defined polynucleotide sequence. 2. The computer program of claim 1, wherein a forward sequence is optionally converted to upper case using an algorithm comprising: TABLE-US-00015 $forseq = ""; for ($j = 0; $j <= seqlen-1; $j ++) { $bas = substr($sequence,$j,1); if ($bas eq "a"){$cfor = "A";} elsif ($bas eq "t"){$cfor = "T";} elsif ($bas eq "c"){$cfor = "C";} elsif ($bas eq "g"){$cfor = "G";} elsif ($bas eq "A"){$cfor = "A";} elsif ($bas eq "T"){$cfor = "T";} elsif ($bas eq "C"){$cfor = "C";} elsif ($bas eq "G"){$cfor = "G";} else {$cfor = "X"}; $forseq = $forseq.$cfor; print OUT "$j \n"; wherein $seqlen is the length of the DNA sequence in bases; $bas is the individual base in a sequence; and $forseq is the sequence of a forward oligonucleotide. 
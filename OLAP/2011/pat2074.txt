A method for training a system to specifically react on a specific input. The method can include defining a set of binary data structures, each representing a real-world component, item, or virtual object; storing each data structure as a binary pattern; creating uniquely identifiable copies of the data structures to represent individual instances of the components, items, or virtual objects; creating a virtual state space of the components, items, or virtual objects by grouping them as relevant for a specific situation; receiving an input to change a status or an attribute value of at least one of the components, items, or virtual objects; storing the received changes in a new version of the applicable data structure instance; analyzing similarities of the stored binary patterns related to a particular action performed; and if a matched binary pattern is identified, proposing at least one possible action related to the matched binary pattern.
Claims What is claimed is: 1. A method for training a system to specifically react on a specific input, comprising: defining a set of binary data structures, each data structure representing an abstract description of a certain type of a real-world component, item, or virtual object, and each data structure comprising a feature of said represented type of component, item, or object, its possible states, its attributes, its possible actions to be performed, and possible relationships between other of said components, items, or virtual objects; storing each of the binary data structures directly as a binary pattern in a computer memory or a disk memory; creating uniquely identifiable copies of the binary data structures to represent an individual instance of said types of components, items, or virtual objects; creating a virtual state space of said individual types of components, items, or virtual objects by grouping them as relevant for a specific situation; receiving in real time data describing a human user's interactions with said real-world components, items, or virtual objects; modifying the virtual state space for the specific situation in response to the human user's interactions; receiving via keyboard input, sensor devices, or other technical means changes of status or attribute values of at least one of said components, items, or virtual objects; storing said received changes as a new version of the respective data structure, representing the changed status and transition process of said individual components, items, or virtual objects; analyzing similarities of said binary patterns stored in said computer or disk memory related to a particular action performed; searching for a match in said binary patterns of said data structures; and if at least one matched binary pattern of said data structures is identified, proposing or automatically performing at least one possible action related to the matched binary pattern. 2. The method according to claim 1, further comprising storing said received changes as a new version of the respective data structure while retaining the previous version in said binary pattern in said computer memory or disk memory. 3. The method according to claim 1, further comprising: receiving in a training phase actions performed on the individual components, items or virtual objects by an identified type of operator via keyboard input, sensor devices or other technical means; and creating a decision pattern map of all data structures in the virtual state space for each repeatedly received action. 4. The method according to claim 3, wherein during the training phase only changes in the virtual state space caused by a specific action are collected and other automatically generated changes are excluded from collection. 5. The method according to claim 4, wherein the changes caused by a specific action are distinguished from other changes by marking or by a heuristic method scanning the actions done for typical characteristics. 6. The method according to claim 3, further comprising: storing as abstract causal data patterns snap-shot information from the individual binary data structures in the virtual state space of the point in time when said identified operator performs a specific action; calculating a mathematical distance between said causal data patterns to create pattern clusters, reducing the amount of data needed to search for recurring patterns in said virtual state space; building a decision tree using said causal pattern clusters using the calculated mathematical distance; using said decision tree to identify an abstract causal data pattern in the individual data structures of an individual state space upon the occurrence of a change event in the state space; using the abstract causal data in the decision tree to find a similar pattern in another individual state space; and using gathered training information stored in the decision tree from operator actions in previous situations to propose probable actions to the same kind of operator in future similar situations without intermediate offline processing of collected training data. 7. The method according to claim 1, wherein said at least one action corresponding to said identified binary pattern is proposed or caused only if the number of found repeated patterns exceeds a given specific threshold value. 8. The method according to claim 1, further comprising: defining relevant actions of said data structures; and storing changed binary data structures as new versions only if at least one of said relevant actions is performed. 9. The method according to claim 1, wherein the step of defining said set of binary data structures is performed via a keyboard, via sensory devices, via voice or via image recognition. 10. The method according to claim 1, wherein each of said binary data structures is stored directly and identically in a binary data format to computer random access memory or computer disk, comprising binary sequences encoding the type, a global unified identifier, a version or sequence number and a transaction ID for said structure that describes a component, item or virtual object. 11. The method according to claim 1, wherein the binary data structures are stored in said computer memory or disk memory in an encrypted format. 12. The method according to claim 1, wherein the description of each binary data structure, describing components, items or virtual objects, comprises attributes, attribute properties, possible value ranges of the attributes, access privileges and policies, state definitions, state pre- and post constraints, state transitions, transition change events, state changing event listeners, action definitions, action mapping to system internal functions, state changes and child and parent relationship definitions describing references to other data structures. 13. The method according to claim 1, wherein the set of binary data structures is stored on a computer memory and on a disk memory. 14. The method according to claim 1, wherein said binary data structures or said binary data patterns are exchanged via internet or other data lines between different computer systems. 15. The method according to claim 1, wherein said computer memory is a computer random access memory. 16. A computer system comprising: at least one processor, a computer memory, in particular a computer random access memory, or disk memory; a number of hardware interfaces for connecting individual components or items; and an operator input/output interface to interact with virtual objects, designed to execute the method according to claim 1. 17. A computer system according to claim 16, further comprising a computer network interface to link multiple computer systems. 18. A computer program product stored in a computer readable storage medium, for enabling a computer to execute a method according to claim 1. 19. A computer program product embodied in a computer system comprising at least one processor and a memory for enabling a computer to execute a method according to claim 1. 